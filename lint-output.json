[
  {
    "filePath": "/home/renato/developer/labs/cvats/app/globals-css.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/AutoTypingResume.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/Features.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/Hero.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/LogoCloud.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/QuestionsAndAnswers.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/Steps.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/Testimonials.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/set-state-in-effect",
        "severity": 2,
        "message": "Error: Calling setState synchronously within an effect can trigger cascading renders\n\nEffects are intended to synchronize state between React and external systems such as manually updating the DOM, state management libraries, or other platform APIs. In general, the body of an effect should do one or both of the following:\n* Update external systems with the latest state from React.\n* Subscribe for updates from some external system, calling setState in a callback function when external state changes.\n\nCalling setState synchronously within an effect body causes cascading renders that can hurt performance, and is not recommended. (https://react.dev/learn/you-might-not-need-an-effect).\n\n/home/renato/developer/labs/cvats/app/home/Testimonials.tsx:60:5\n  58 |   const { isLg } = useTailwindBreakpoints();\n  59 |   useEffect(() => {\n> 60 |     setTestimonialsClassNames(\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^ Avoid calling setState() directly within an effect\n  61 |       isLg ? LG_TESTIMONIALS_CLASSNAMES : SM_TESTIMONIALS_CLASSNAMES\n  62 |     );\n  63 |   }, [isLg]);",
        "line": 60,
        "column": 5,
        "nodeType": null,
        "endLine": 60,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport heartSrc from \"public/assets/heart.svg\";\nimport testimonialSpiegelSrc from \"public/assets/testimonial-spiegel.jpg\";\nimport testimonialSantiSrc from \"public/assets/testimonial-santi.jpg\";\nimport testimonialVivianSrc from \"public/assets/testimonial-vivian.jpg\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Image from \"next/image\";\nimport { useTailwindBreakpoints } from \"lib/hooks/useTailwindBreakpoints\";\n\nconst TESTIMONIALS = [\n  {\n    src: testimonialSpiegelSrc,\n    quote:\n      \"Students often make silly mistakes on their resume by using inconsistent bullet points or font sizes. cvats’s auto format feature is a great help to ensure consistent format.\",\n    name: \"Ms. Spiegel\",\n    title: \"Educator\",\n  },\n  {\n    src: testimonialSantiSrc,\n    quote:\n      \"I used cvats during my last job search and was invited to interview at top tech companies such as Google and Amazon thanks to its slick yet professional resume design.\",\n    name: \"Santi\",\n    title: \"Software Engineer\",\n  },\n  {\n    src: testimonialVivianSrc,\n    quote:\n      \"Creating a professional resume on cvats is so smooth and easy! It saves me so much time and headache to not deal with google doc template.\",\n    name: \"Vivian\",\n    title: \"College Student\",\n  },\n];\n\nconst LG_TESTIMONIALS_CLASSNAMES = [\n  \"z-10\",\n  \"translate-x-44 translate-y-24 opacity-40\",\n  \"translate-x-32 -translate-y-28 opacity-40\",\n];\nconst SM_TESTIMONIALS_CLASSNAMES = [\"z-10\", \"opacity-0\", \"opacity-0\"];\nconst ROTATION_INTERVAL_MS = 8 * 1000; // 8s\n\nexport const Testimonials = ({ children }: { children?: React.ReactNode }) => {\n  const [testimonialsClassNames, setTestimonialsClassNames] = useState(\n    LG_TESTIMONIALS_CLASSNAMES\n  );\n  const isHoveredOnTestimonial = useRef(false);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (!isHoveredOnTestimonial.current) {\n        setTestimonialsClassNames((preClassNames) => {\n          return [preClassNames[1], preClassNames[2], preClassNames[0]];\n        });\n      }\n    }, ROTATION_INTERVAL_MS);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const { isLg } = useTailwindBreakpoints();\n  useEffect(() => {\n    setTestimonialsClassNames(\n      isLg ? LG_TESTIMONIALS_CLASSNAMES : SM_TESTIMONIALS_CLASSNAMES\n    );\n  }, [isLg]);\n\n  return (\n    <section className=\"mx-auto -mt-2 px-8 pb-24\">\n      <h2 className=\"mb-8 text-center text-3xl font-bold\">\n        People{\" \"}\n        <Image src={heartSrc} alt=\"love\" className=\"-mt-1 inline-block w-7\" />{\" \"}\n        cvats\n      </h2>\n      <div className=\"mx-auto mt-10 h-[235px] max-w-lg lg:h-[400px] lg:pt-28\">\n        <div className=\"relative lg:ml-[-50px]\">\n          {TESTIMONIALS.map(({ src, quote, name, title }, idx) => {\n            const className = testimonialsClassNames[idx];\n            return (\n              <div\n                key={idx}\n                className={`bg-primary absolute max-w-lg rounded-[1.7rem] bg-opacity-30 shadow-md transition-all duration-1000 ease-linear ${className}`}\n                onMouseEnter={() => {\n                  if (className === \"z-10\") {\n                    isHoveredOnTestimonial.current = true;\n                  }\n                }}\n                onMouseLeave={() => {\n                  if (className === \"z-10\") {\n                    isHoveredOnTestimonial.current = false;\n                  }\n                }}\n              >\n                <figure className=\"m-1 flex gap-5 rounded-3xl bg-white p-5 text-gray-900 lg:p-7\">\n                  <Image\n                    className=\"hidden h-24 w-24 select-none rounded-full lg:block\"\n                    src={src}\n                    alt=\"profile\"\n                  />\n                  <div>\n                    <blockquote>\n                      <p className=\"before:content-['“'] after:content-['”']\">\n                        {quote}\n                      </p>\n                    </blockquote>\n                    <figcaption className=\"mt-3\">\n                      <div className=\"hidden gap-2 lg:flex\">\n                        <div className=\"font-semibold\">{name}</div>\n                        <div\n                          className=\"select-none text-gray-700\"\n                          aria-hidden=\"true\"\n                        >\n                          •\n                        </div>\n                        <div className=\"text-gray-600\">{title}</div>\n                      </div>\n                      <div className=\"flex gap-4 lg:hidden\">\n                        <Image\n                          className=\" block h-12 w-12 select-none rounded-full\"\n                          src={src}\n                          alt=\"profile\"\n                        />\n                        <div>\n                          <div className=\"font-semibold\">{name}</div>\n                          <div className=\"text-gray-600\">{title}</div>\n                        </div>\n                      </div>\n                    </figcaption>\n                  </div>\n                </figure>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      {children}\n    </section>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/home/constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/__tests__/cx.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/__tests__/make-object-char-iterator.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/cx.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/deep-clone.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [246, 249], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [246, 249], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Server side object deep clone util using JSON serialization.\n * Not efficient for large objects but good enough for most use cases.\n *\n * Client side can simply use structuredClone.\n */\nexport const deepClone = <T extends { [key: string]: any }>(object: T) =>\n  JSON.parse(JSON.stringify(object)) as T;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/deep-merge.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31, 34], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31, 34], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 3,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 3,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [63, 66], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [63, 66], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "type Object = { [key: string]: any };\n\nconst isObject = (item: any): item is Object => {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n};\n\n/**\n * Deep merge two objects by overriding target with fields in source.\n * It returns a new object and doesn't modify any object in place since\n * it deep clones the target object first.\n */\nexport const deepMerge = (target: Object, source: Object, level = 0) => {\n  const copyTarget = level === 0 ? structuredClone(target) : target;\n  for (const key in source) {\n    const sourceValue = source[key];\n    // Assign source value to copyTarget if source value is not an object.\n    // Otherwise, call deepMerge recursively to merge all its keys\n    if (!isObject(sourceValue)) {\n      copyTarget[key] = sourceValue;\n    } else {\n      if (!isObject(copyTarget[key])) {\n        copyTarget[key] = {};\n      }\n      deepMerge(copyTarget[key], sourceValue, level + 1);\n    }\n  }\n  return copyTarget;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/get-px-per-rem.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 8,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 11,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [124, 127], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [124, 127], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export const getPxPerRem = () => {\n  const bodyComputedStyle = getComputedStyle(\n    document.querySelector(\"body\")!\n  ) as any;\n  return parseFloat(bodyComputedStyle[\"font-size\"]) || 16;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/hooks/useAutosizeTextareaHeight.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/hooks/useTailwindBreakpoints.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/make-object-char-iterator.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 3,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 3,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [76, 79], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [76, 79], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { deepClone } from \"lib/deep-clone\";\n\ntype Object = { [key: string]: any };\n\n/**\n * makeObjectCharIterator is a generator function that iterates a start object to\n * match an end object state by iterating through each string character.\n *\n * Note: Start object and end object must have the same structure and same keys.\n *       And they must have string or array or object as values.\n *\n * @example\n * const start = {a : \"\"}\n * const end = {a : \"abc\"};\n * const iterator = makeObjectCharIterator(start, end);\n * iterator.next().value // {a : \"a\"}\n * iterator.next().value // {a : \"ab\"}\n * iterator.next().value // {a : \"abc\"}\n */\nexport function* makeObjectCharIterator<T extends Object>(\n  start: T,\n  end: T,\n  level = 0\n) {\n  // Have to manually cast Object type and return T type due to https://github.com/microsoft/TypeScript/issues/47357\n  const object: Object = level === 0 ? deepClone(start) : start;\n  for (const [key, endValue] of Object.entries(end)) {\n    if (typeof endValue === \"object\") {\n      const recursiveIterator = makeObjectCharIterator(\n        object[key],\n        endValue,\n        level + 1\n      );\n      while (true) {\n        const next = recursiveIterator.next();\n        if (next.done) {\n          break;\n        }\n        yield deepClone(object) as T;\n      }\n    } else {\n      for (let i = 1; i <= endValue.length; i++) {\n        object[key] = endValue.slice(0, i);\n        yield deepClone(object) as T;\n      }\n    }\n  }\n}\n\nexport const countObjectChar = (object: Object) => {\n  let count = 0;\n  for (const value of Object.values(object)) {\n    if (typeof value === \"object\") {\n      count += countObjectChar(value);\n    } else if (typeof value === \"string\") {\n      count += value.length;\n    }\n  }\n  return count;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/extract-education.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/extract-profile.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/extract-project.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/extract-resume-from-sections.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/extract-skills.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/extract-work-experience.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/lib/bullet-points.ts",
    "messages": [
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'item' is never reassigned. Use 'const' instead.",
        "line": 44,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 44,
        "endColumn": 16,
        "fix": { "range": [1229, 1237], "text": "const item" }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'bulletMaxCount' is never reassigned. Use 'const' instead.",
        "line": 78,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 78,
        "endColumn": 21,
        "fix": { "range": [2246, 2269], "text": "const bulletMaxCount = 0;" }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'char' is never reassigned. Use 'const' instead.",
        "line": 79,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 79,
        "endColumn": 16,
        "fix": { "range": [2277, 2285], "text": "const char" }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'item' is never reassigned. Use 'const' instead.",
        "line": 92,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 92,
        "endColumn": 18,
        "fix": { "range": [2636, 2644], "text": "const item" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 4,
    "fixableWarningCount": 0,
    "source": "import type { Lines, TextItem } from \"lib/parse-resume-from-pdf/types\";\n\n/**\n * List of bullet points\n * Reference: https://stackoverflow.com/questions/56540160/why-isnt-there-a-medium-small-black-circle-in-unicode\n * U+22C5   DOT OPERATOR (⋅)\n * U+2219   BULLET OPERATOR (∙)\n * U+1F784  BLACK SLIGHTLY SMALL CIRCLE (🞄)\n * U+2022   BULLET (•) -------- most common\n * U+2981   Z NOTATION SPOT (⦁)\n * U+26AB   MEDIUM BLACK CIRCLE (⚫︎)\n * U+25CF   BLACK CIRCLE (●)\n * U+2B24   BLACK LARGE CIRCLE (⬤)\n * U+26AC   MEDIUM SMALL WHITE CIRCLE ⚬\n * U+25CB   WHITE CIRCLE ○\n */\nexport const BULLET_POINTS = [\n  \"⋅\",\n  \"∙\",\n  \"🞄\",\n  \"•\",\n  \"⦁\",\n  \"⚫︎\",\n  \"●\",\n  \"⬤\",\n  \"⚬\",\n  \"○\",\n];\n\n/**\n * Convert bullet point lines into a string array aka descriptions.\n */\nexport const getBulletPointsFromLines = (lines: Lines): string[] => {\n  // Simply return all lines with text item joined together if there is no bullet point\n  const firstBulletPointLineIndex = getFirstBulletPointLineIdx(lines);\n  if (firstBulletPointLineIndex === undefined) {\n    return lines.map((line) => line.map((item) => item.text).join(\" \"));\n  }\n\n  // Otherwise, process and remove bullet points\n\n  // Combine all lines into a single string\n  let lineStr = \"\";\n  for (let item of lines.flat()) {\n    const text = item.text;\n    // Make sure a space is added between 2 words\n    if (!lineStr.endsWith(\" \") && !text.startsWith(\" \")) {\n      lineStr += \" \";\n    }\n    lineStr += text;\n  }\n\n  // Get the most common bullet point\n  const commonBulletPoint = getMostCommonBulletPoint(lineStr);\n\n  // Start line string from the beginning of the first bullet point\n  const firstBulletPointIndex = lineStr.indexOf(commonBulletPoint);\n  if (firstBulletPointIndex !== -1) {\n    lineStr = lineStr.slice(firstBulletPointIndex);\n  }\n\n  // Divide the single string using bullet point as divider\n  return lineStr\n    .split(commonBulletPoint)\n    .map((text) => text.trim())\n    .filter((text) => !!text);\n};\n\nconst getMostCommonBulletPoint = (str: string): string => {\n  const bulletToCount: { [bullet: string]: number } = BULLET_POINTS.reduce(\n    (acc: { [bullet: string]: number }, cur) => {\n      acc[cur] = 0;\n      return acc;\n    },\n    {}\n  );\n  let bulletWithMostCount = BULLET_POINTS[0];\n  let bulletMaxCount = 0;\n  for (let char of str) {\n    if (bulletToCount.hasOwnProperty(char)) {\n      bulletToCount[char]++;\n      if (bulletToCount[char] > bulletMaxCount) {\n        bulletWithMostCount = char;\n      }\n    }\n  }\n  return bulletWithMostCount;\n};\n\nconst getFirstBulletPointLineIdx = (lines: Lines): number | undefined => {\n  for (let i = 0; i < lines.length; i++) {\n    for (let item of lines[i]) {\n      if (BULLET_POINTS.some((bullet) => item.text.includes(bullet))) {\n        return i;\n      }\n    }\n  }\n  return undefined;\n};\n\n// Only consider words that don't contain numbers\nconst isWord = (str: string) => /^[^0-9]+$/.test(str);\nconst hasAtLeast8Words = (item: TextItem) =>\n  item.text.split(/\\s/).filter(isWord).length >= 8;\n\nexport const getDescriptionsLineIdx = (lines: Lines): number | undefined => {\n  // The main heuristic to determine descriptions is to check if has bullet point\n  let idx = getFirstBulletPointLineIdx(lines);\n\n  // Fallback heuristic if the main heuristic doesn't apply (e.g. LinkedIn resume) to\n  // check if the line has at least 8 words\n  if (idx === undefined) {\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (line.length === 1 && hasAtLeast8Words(line[0])) {\n        idx = i;\n        break;\n      }\n    }\n  }\n\n  return idx;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/lib/common-features.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/lib/feature-scoring-system.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/lib/get-section-lines.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/extract-resume-from-sections/lib/subsections.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/group-lines-into-sections.ts",
    "messages": [
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'sections' is never reassigned. Use 'const' instead.",
        "line": 24,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 24,
        "endColumn": 37,
        "fix": { "range": [767, 807], "text": "const sections: ResumeSectionToLines = {};" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import type { ResumeKey } from \"lib/redux/types\";\nimport type {\n  Line,\n  Lines,\n  ResumeSectionToLines,\n} from \"lib/parse-resume-from-pdf/types\";\nimport {\n  hasLetterAndIsAllUpperCase,\n  hasOnlyLettersSpacesAmpersands,\n  isBold,\n} from \"lib/parse-resume-from-pdf/extract-resume-from-sections/lib/common-features\";\n\nexport const PROFILE_SECTION: ResumeKey = \"profile\";\n\n/**\n * Step 3. Group lines into sections\n *\n * Every section (except the profile section) starts with a section title that\n * takes up the entire line. This is a common pattern not just in resumes but\n * also in books and blogs. The resume parser uses this pattern to group lines\n * into the closest section title above these lines.\n */\nexport const groupLinesIntoSections = (lines: Lines) => {\n  let sections: ResumeSectionToLines = {};\n  let sectionName: string = PROFILE_SECTION;\n  let sectionLines = [];\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    const text = line[0]?.text.trim();\n    if (isSectionTitle(line, i)) {\n      sections[sectionName] = [...sectionLines];\n      sectionName = text;\n      sectionLines = [];\n    } else {\n      sectionLines.push(line);\n    }\n  }\n  if (sectionLines.length > 0) {\n    sections[sectionName] = [...sectionLines];\n  }\n  return sections;\n};\n\nconst SECTION_TITLE_PRIMARY_KEYWORDS = [\n  \"experience\",\n  \"education\",\n  \"project\",\n  \"skill\",\n];\nconst SECTION_TITLE_SECONDARY_KEYWORDS = [\n  \"job\",\n  \"course\",\n  \"extracurricular\",\n  \"objective\",\n  \"summary\", // LinkedIn generated resume has a summary section\n  \"award\",\n  \"honor\",\n  \"project\",\n];\nconst SECTION_TITLE_KEYWORDS = [\n  ...SECTION_TITLE_PRIMARY_KEYWORDS,\n  ...SECTION_TITLE_SECONDARY_KEYWORDS,\n];\n\nconst isSectionTitle = (line: Line, lineNumber: number) => {\n  const isFirstTwoLines = lineNumber < 2;\n  const hasMoreThanOneItemInLine = line.length > 1;\n  const hasNoItemInLine = line.length === 0;\n  if (isFirstTwoLines || hasMoreThanOneItemInLine || hasNoItemInLine) {\n    return false;\n  }\n\n  const textItem = line[0];\n\n  // The main heuristic to determine a section title is to check if the text is double emphasized\n  // to be both bold and all uppercase, which is generally true for a well formatted resume\n  if (isBold(textItem) && hasLetterAndIsAllUpperCase(textItem)) {\n    return true;\n  }\n\n  // The following is a fallback heuristic to detect section title if it includes a keyword match\n  // (This heuristics is not well tested and may not work well)\n  const text = textItem.text.trim();\n  const textHasAtMost2Words =\n    text.split(\" \").filter((s) => s !== \"&\").length <= 2;\n  const startsWithCapitalLetter = /[A-Z]/.test(text.slice(0, 1));\n\n  if (\n    textHasAtMost2Words &&\n    hasOnlyLettersSpacesAmpersands(textItem) &&\n    startsWithCapitalLetter &&\n    SECTION_TITLE_KEYWORDS.some((keyword) =>\n      text.toLowerCase().includes(keyword)\n    )\n  ) {\n    return true;\n  }\n\n  return false;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/group-text-items-into-lines.ts",
    "messages": [
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'item' is never reassigned. Use 'const' instead.",
        "line": 13,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 13,
        "endColumn": 16,
        "fix": { "range": [514, 522], "text": "const item" }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'line' is never reassigned. Use 'const' instead.",
        "line": 37,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 37,
        "endColumn": 16,
        "fix": { "range": [1360, 1368], "text": "const line" }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'item' is never reassigned. Use 'const' instead.",
        "line": 93,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 93,
        "endColumn": 16,
        "fix": { "range": [3546, 3554], "text": "const item" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "source": "import { BULLET_POINTS } from \"lib/parse-resume-from-pdf/extract-resume-from-sections/lib/bullet-points\";\nimport type { TextItems, Line, Lines } from \"lib/parse-resume-from-pdf/types\";\n\n/**\n * Step 2: Group text items into lines. This returns an array where each position\n * contains text items in the same line of the pdf file.\n */\nexport const groupTextItemsIntoLines = (textItems: TextItems): Lines => {\n  const lines: Lines = [];\n\n  // Group text items into lines based on hasEOL\n  let line: Line = [];\n  for (let item of textItems) {\n    // If item is EOL, add current line to lines and start a new empty line\n    if (item.hasEOL) {\n      if (item.text.trim() !== \"\") {\n        line.push({ ...item });\n      }\n      lines.push(line);\n      line = [];\n    }\n    // Otherwise, add item to current line\n    else if (item.text.trim() !== \"\") {\n      line.push({ ...item });\n    }\n  }\n  // Add last line if there is item in last line\n  if (line.length > 0) {\n    lines.push(line);\n  }\n\n  // Many pdf docs are not well formatted, e.g. due to converting from other docs.\n  // This creates many noises, where a single text item is divided into multiple\n  // ones. This step is to merge adjacent text items if their distance is smaller\n  // than a typical char width to filter out those noises.\n  const typicalCharWidth = getTypicalCharWidth(lines.flat());\n  for (let line of lines) {\n    // Start from the end of the line to make things easier to merge and delete\n    for (let i = line.length - 1; i > 0; i--) {\n      const currentItem = line[i];\n      const leftItem = line[i - 1];\n      const leftItemXEnd = leftItem.x + leftItem.width;\n      const distance = currentItem.x - leftItemXEnd;\n      if (distance <= typicalCharWidth) {\n        if (shouldAddSpaceBetweenText(leftItem.text, currentItem.text)) {\n          leftItem.text += \" \";\n        }\n        leftItem.text += currentItem.text;\n        // Update leftItem width to include currentItem after merge before deleting current item\n        const currentItemXEnd = currentItem.x + currentItem.width;\n        leftItem.width = currentItemXEnd - leftItem.x;\n        line.splice(i, 1);\n      }\n    }\n  }\n\n  return lines;\n};\n\n// Sometimes a space is lost while merging adjacent text items. This accounts for some of those cases\nconst shouldAddSpaceBetweenText = (leftText: string, rightText: string) => {\n  const leftTextEnd = leftText[leftText.length - 1];\n  const rightTextStart = rightText[0];\n  const conditions = [\n    [\":\", \",\", \"|\", \".\", ...BULLET_POINTS].includes(leftTextEnd) &&\n      rightTextStart !== \" \",\n    leftTextEnd !== \" \" && [\"|\", ...BULLET_POINTS].includes(rightTextStart),\n  ];\n\n  return conditions.some((condition) => condition);\n};\n\n/**\n * Return the width of a typical character. (Helper util for groupTextItemsIntoLines)\n *\n * A pdf file uses different characters, each with different width due to different\n * font family and font size. This util first extracts the most typically used font\n * family and font height, and compute the average character width using text items\n * that match the typical font family and height.\n */\nconst getTypicalCharWidth = (textItems: TextItems): number => {\n  // Exclude empty space \" \" in calculations since its width isn't precise\n  textItems = textItems.filter((item) => item.text.trim() !== \"\");\n\n  const heightToCount: { [height: number]: number } = {};\n  let commonHeight = 0;\n  let heightMaxCount = 0;\n\n  const fontNameToCount: { [fontName: string]: number } = {};\n  let commonFontName = \"\";\n  let fontNameMaxCount = 0;\n\n  for (let item of textItems) {\n    const { text, height, fontName } = item;\n    // Process height\n    if (!heightToCount[height]) {\n      heightToCount[height] = 0;\n    }\n    heightToCount[height]++;\n    if (heightToCount[height] > heightMaxCount) {\n      commonHeight = height;\n      heightMaxCount = heightToCount[height];\n    }\n\n    // Process font name\n    if (!fontNameToCount[fontName]) {\n      fontNameToCount[fontName] = 0;\n    }\n    fontNameToCount[fontName] += text.length;\n    if (fontNameToCount[fontName] > fontNameMaxCount) {\n      commonFontName = fontName;\n      fontNameMaxCount = fontNameToCount[fontName];\n    }\n  }\n\n  // Find the text items that match common font family and height\n  const commonTextItems = textItems.filter(\n    (item) => item.fontName === commonFontName && item.height === commonHeight\n  );\n  // Aggregate total width and number of characters of all common text items\n  const [totalWidth, numChars] = commonTextItems.reduce(\n    (acc, cur) => {\n      const [preWidth, prevChars] = acc;\n      return [preWidth + cur.width, prevChars + cur.text.length];\n    },\n    [0, 0]\n  );\n  const typicalCharWidth = totalWidth / numChars;\n\n  return typicalCharWidth;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/read-pdf.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 4,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 4,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": { "range": [162, 175], "text": "// @ts-expect-error" },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dir' is assigned a value but never used.",
        "line": 41,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Getting pdfjs to work is tricky. The following 3 lines would make it work\n// https://stackoverflow.com/a/63486898/7699841\nimport * as pdfjs from \"pdfjs-dist\";\n// @ts-ignore\nimport pdfjsWorker from \"pdfjs-dist/build/pdf.worker.entry\";\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\nimport type { TextItem as PdfjsTextItem } from \"pdfjs-dist/types/src/display/api\";\nimport type { TextItem, TextItems } from \"lib/parse-resume-from-pdf/types\";\n\n/**\n * Step 1: Read pdf and output textItems by concatenating results from each page.\n *\n * To make processing easier, it returns a new TextItem type, which removes unused\n * attributes (dir, transform), adds x and y positions, and replaces loaded font\n * name with original font name.\n *\n * @example\n * const onFileChange = async (e) => {\n *     const fileUrl = URL.createObjectURL(e.target.files[0]);\n *     const textItems = await readPdf(fileUrl);\n * }\n */\nexport const readPdf = async (fileUrl: string): Promise<TextItems> => {\n  const pdfFile = await pdfjs.getDocument(fileUrl).promise;\n  let textItems: TextItems = [];\n\n  for (let i = 1; i <= pdfFile.numPages; i++) {\n    // Parse each page into text content\n    const page = await pdfFile.getPage(i);\n    const textContent = await page.getTextContent();\n\n    // Wait for font data to be loaded\n    await page.getOperatorList();\n    const commonObjs = page.commonObjs;\n\n    // Convert Pdfjs TextItem type to new TextItem type\n    const pageTextItems = textContent.items.map((item) => {\n      const {\n        str: text,\n        dir, // Remove text direction\n        transform,\n        fontName: pdfFontName,\n        ...otherProps\n      } = item as PdfjsTextItem;\n\n      // Extract x, y position of text item from transform.\n      // As a side note, origin (0, 0) is bottom left.\n      // Reference: https://github.com/mozilla/pdf.js/issues/5643#issuecomment-496648719\n      const x = transform[4];\n      const y = transform[5];\n\n      // Use commonObjs to convert font name to original name (e.g. \"GVDLYI+Arial-BoldMT\")\n      // since non system font name by default is a loaded name, e.g. \"g_d8_f1\"\n      // Reference: https://github.com/mozilla/pdf.js/pull/15659\n      const fontObj = commonObjs.get(pdfFontName);\n      const fontName = fontObj.name;\n\n      // pdfjs reads a \"-\" as \"-­‐\" in the resume example. This is to revert it.\n      // Note \"-­‐\" is \"-&#x00AD;‐\" with a soft hyphen in between. It is not the same as \"--\"\n      const newText = text.replace(/-­‐/g, \"-\");\n\n      const newItem = {\n        ...otherProps,\n        fontName,\n        text: newText,\n        x,\n        y,\n      };\n      return newItem;\n    });\n\n    // Some pdf's text items are not in order. This is most likely a result of creating it\n    // from design softwares, e.g. canvas. The commented out method can sort pageTextItems\n    // by y position to put them back in order. But it is not used since it might be more\n    // helpful to let users know that the pdf is not in order.\n    // pageTextItems.sort((a, b) => Math.round(b.y) - Math.round(a.y));\n\n    // Add text items of each page to total\n    textItems.push(...pageTextItems);\n  }\n\n  // Filter out empty space textItem noise\n  const isEmptySpace = (textItem: TextItem) =>\n    !textItem.hasEOL && textItem.text.trim() === \"\";\n  textItems = textItems.filter((textItem) => !isEmptySpace(textItem));\n\n  return textItems;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/parse-resume-from-pdf/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/redux/hooks.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",
        "line": 58,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 58,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [dispatch]",
            "fix": { "range": [1711, 1713], "text": "[dispatch]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect } from \"react\";\nimport {\n  useDispatch,\n  useSelector,\n  type TypedUseSelectorHook,\n} from \"react-redux\";\nimport { store, type RootState, type AppDispatch } from \"lib/redux/store\";\nimport {\n  loadStateFromLocalStorage,\n  saveStateToLocalStorage,\n} from \"lib/redux/local-storage\";\nimport { initialResumeState, setResume } from \"lib/redux/resumeSlice\";\nimport {\n  initialSettings,\n  setSettings,\n  type Settings,\n} from \"lib/redux/settingsSlice\";\nimport { deepMerge } from \"lib/deep-merge\";\nimport type { Resume } from \"lib/redux/types\";\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n/**\n * Hook to save store to local storage on store change\n */\nexport const useSaveStateToLocalStorageOnChange = () => {\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      saveStateToLocalStorage(store.getState());\n    });\n    return unsubscribe;\n  }, []);\n};\n\nexport const useSetInitialStore = () => {\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    const state = loadStateFromLocalStorage();\n    if (!state) return;\n    if (state.resume) {\n      // We merge the initial state with the stored state to ensure\n      // backward compatibility, since new fields might be added to\n      // the initial state over time.\n      const mergedResumeState = deepMerge(\n        initialResumeState,\n        state.resume\n      ) as Resume;\n      dispatch(setResume(mergedResumeState));\n    }\n    if (state.settings) {\n      const mergedSettingsState = deepMerge(\n        initialSettings,\n        state.settings\n      ) as Settings;\n      dispatch(setSettings(mergedSettingsState));\n    }\n  }, []);\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/redux/local-storage.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 12,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 21,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { RootState } from \"lib/redux/store\";\n\n// Reference: https://dev.to/igorovic/simplest-way-to-persist-redux-state-to-localstorage-e67\n\nconst LOCAL_STORAGE_KEY = \"open-resume-state\";\n\nexport const loadStateFromLocalStorage = () => {\n  try {\n    const stringifiedState = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (!stringifiedState) return undefined;\n    return JSON.parse(stringifiedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const saveStateToLocalStorage = (state: RootState) => {\n  try {\n    const stringifiedState = JSON.stringify(state);\n    localStorage.setItem(LOCAL_STORAGE_KEY, stringifiedState);\n  } catch (e) {\n    // Ignore\n  }\n};\n\nexport const getHasUsedAppBefore = () => Boolean(loadStateFromLocalStorage());\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/redux/resumeSlice.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2339, 2342], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2339, 2342], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2613, 2616], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2613, 2616], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2877, 2880], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2877, 2880], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createSlice, type PayloadAction } from \"@reduxjs/toolkit\";\nimport type { RootState } from \"lib/redux/store\";\nimport type {\n  FeaturedSkill,\n  Resume,\n  ResumeEducation,\n  ResumeProfile,\n  ResumeProject,\n  ResumeSkills,\n  ResumeWorkExperience,\n} from \"lib/redux/types\";\nimport type { ShowForm } from \"lib/redux/settingsSlice\";\n\nexport const initialProfile: ResumeProfile = {\n  name: \"\",\n  summary: \"\",\n  email: \"\",\n  phone: \"\",\n  location: \"\",\n  url: \"\",\n};\n\nexport const initialWorkExperience: ResumeWorkExperience = {\n  company: \"\",\n  jobTitle: \"\",\n  date: \"\",\n  descriptions: [],\n};\n\nexport const initialEducation: ResumeEducation = {\n  school: \"\",\n  degree: \"\",\n  gpa: \"\",\n  date: \"\",\n  descriptions: [],\n};\n\nexport const initialProject: ResumeProject = {\n  project: \"\",\n  date: \"\",\n  descriptions: [],\n};\n\nexport const initialFeaturedSkill: FeaturedSkill = { skill: \"\", rating: 4 };\nexport const initialFeaturedSkills: FeaturedSkill[] = Array(6).fill({\n  ...initialFeaturedSkill,\n});\nexport const initialSkills: ResumeSkills = {\n  featuredSkills: initialFeaturedSkills,\n  descriptions: [],\n};\n\nexport const initialCustom = {\n  descriptions: [],\n};\n\nexport const initialResumeState: Resume = {\n  profile: initialProfile,\n  workExperiences: [initialWorkExperience],\n  educations: [initialEducation],\n  projects: [initialProject],\n  skills: initialSkills,\n  custom: initialCustom,\n};\n\n// Keep the field & value type in sync with CreateHandleChangeArgsWithDescriptions (components\\ResumeForm\\types.ts)\nexport type CreateChangeActionWithDescriptions<T> = {\n  idx: number;\n} & (\n  | {\n      field: Exclude<keyof T, \"descriptions\">;\n      value: string;\n    }\n  | { field: \"descriptions\"; value: string[] }\n);\n\nexport const resumeSlice = createSlice({\n  name: \"resume\",\n  initialState: initialResumeState,\n  reducers: {\n    changeProfile: (\n      draft,\n      action: PayloadAction<{ field: keyof ResumeProfile; value: string }>\n    ) => {\n      const { field, value } = action.payload;\n      draft.profile[field] = value;\n    },\n    changeWorkExperiences: (\n      draft,\n      action: PayloadAction<\n        CreateChangeActionWithDescriptions<ResumeWorkExperience>\n      >\n    ) => {\n      const { idx, field, value } = action.payload;\n      const workExperience = draft.workExperiences[idx];\n      workExperience[field] = value as any;\n    },\n    changeEducations: (\n      draft,\n      action: PayloadAction<CreateChangeActionWithDescriptions<ResumeEducation>>\n    ) => {\n      const { idx, field, value } = action.payload;\n      const education = draft.educations[idx];\n      education[field] = value as any;\n    },\n    changeProjects: (\n      draft,\n      action: PayloadAction<CreateChangeActionWithDescriptions<ResumeProject>>\n    ) => {\n      const { idx, field, value } = action.payload;\n      const project = draft.projects[idx];\n      project[field] = value as any;\n    },\n    changeSkills: (\n      draft,\n      action: PayloadAction<\n        | { field: \"descriptions\"; value: string[] }\n        | {\n            field: \"featuredSkills\";\n            idx: number;\n            skill: string;\n            rating: number;\n          }\n      >\n    ) => {\n      const { field } = action.payload;\n      if (field === \"descriptions\") {\n        const { value } = action.payload;\n        draft.skills.descriptions = value;\n      } else {\n        const { idx, skill, rating } = action.payload;\n        const featuredSkill = draft.skills.featuredSkills[idx];\n        featuredSkill.skill = skill;\n        featuredSkill.rating = rating;\n      }\n    },\n    changeCustom: (\n      draft,\n      action: PayloadAction<{ field: \"descriptions\"; value: string[] }>\n    ) => {\n      const { value } = action.payload;\n      draft.custom.descriptions = value;\n    },\n    addSectionInForm: (draft, action: PayloadAction<{ form: ShowForm }>) => {\n      const { form } = action.payload;\n      switch (form) {\n        case \"workExperiences\": {\n          draft.workExperiences.push(structuredClone(initialWorkExperience));\n          return draft;\n        }\n        case \"educations\": {\n          draft.educations.push(structuredClone(initialEducation));\n          return draft;\n        }\n        case \"projects\": {\n          draft.projects.push(structuredClone(initialProject));\n          return draft;\n        }\n      }\n    },\n    moveSectionInForm: (\n      draft,\n      action: PayloadAction<{\n        form: ShowForm;\n        idx: number;\n        direction: \"up\" | \"down\";\n      }>\n    ) => {\n      const { form, idx, direction } = action.payload;\n      if (form !== \"skills\" && form !== \"custom\") {\n        if (\n          (idx === 0 && direction === \"up\") ||\n          (idx === draft[form].length - 1 && direction === \"down\")\n        ) {\n          return draft;\n        }\n\n        const section = draft[form][idx];\n        if (direction === \"up\") {\n          draft[form][idx] = draft[form][idx - 1];\n          draft[form][idx - 1] = section;\n        } else {\n          draft[form][idx] = draft[form][idx + 1];\n          draft[form][idx + 1] = section;\n        }\n      }\n    },\n    deleteSectionInFormByIdx: (\n      draft,\n      action: PayloadAction<{ form: ShowForm; idx: number }>\n    ) => {\n      const { form, idx } = action.payload;\n      if (form !== \"skills\" && form !== \"custom\") {\n        draft[form].splice(idx, 1);\n      }\n    },\n    setResume: (draft, action: PayloadAction<Resume>) => {\n      return action.payload;\n    },\n  },\n});\n\nexport const {\n  changeProfile,\n  changeWorkExperiences,\n  changeEducations,\n  changeProjects,\n  changeSkills,\n  changeCustom,\n  addSectionInForm,\n  moveSectionInForm,\n  deleteSectionInFormByIdx,\n  setResume,\n} = resumeSlice.actions;\n\nexport const selectResume = (state: RootState) => state.resume;\nexport const selectProfile = (state: RootState) => state.resume.profile;\nexport const selectWorkExperiences = (state: RootState) =>\n  state.resume.workExperiences;\nexport const selectEducations = (state: RootState) => state.resume.educations;\nexport const selectProjects = (state: RootState) => state.resume.projects;\nexport const selectSkills = (state: RootState) => state.resume.skills;\nexport const selectCustom = (state: RootState) => state.resume.custom;\n\nexport default resumeSlice.reducer;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/redux/settingsSlice.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/redux/store.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/lib/redux/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/resume-builder/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/resume-import/page.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/set-state-in-effect",
        "severity": 2,
        "message": "Error: Calling setState synchronously within an effect can trigger cascading renders\n\nEffects are intended to synchronize state between React and external systems such as manually updating the DOM, state management libraries, or other platform APIs. In general, the body of an effect should do one or both of the following:\n* Update external systems with the latest state from React.\n* Subscribe for updates from some external system, calling setState in a callback function when external state changes.\n\nCalling setState synchronously within an effect body causes cascading renders that can hurt performance, and is not recommended. (https://react.dev/learn/you-might-not-need-an-effect).\n\n/home/renato/developer/labs/cvats/app/resume-import/page.tsx:15:5\n  13 |\n  14 |   useEffect(() => {\n> 15 |     setHasUsedAppBefore(getHasUsedAppBefore());\n     |     ^^^^^^^^^^^^^^^^^^^ Avoid calling setState() directly within an effect\n  16 |   }, []);\n  17 |\n  18 |   return (",
        "line": 15,
        "column": 5,
        "nodeType": null,
        "endLine": 15,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { getHasUsedAppBefore } from \"lib/redux/local-storage\";\nimport { ResumeDropzone } from \"components/ResumeDropzone\";\nimport { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\n\nexport default function ImportResume() {\n  const [hasUsedAppBefore, setHasUsedAppBefore] = useState(false);\n  const [hasAddedResume, setHasAddedResume] = useState(false);\n  const onFileUrlChange = (fileUrl: string) => {\n    setHasAddedResume(Boolean(fileUrl));\n  };\n\n  useEffect(() => {\n    setHasUsedAppBefore(getHasUsedAppBefore());\n  }, []);\n\n  return (\n    <main>\n      <div className=\"mx-auto mt-14 max-w-3xl rounded-md border border-gray-200 px-10 py-10 text-center shadow-md\">\n        {!hasUsedAppBefore ? (\n          <>\n            <h1 className=\"text-lg font-semibold text-gray-900\">\n              Import data from an existing resume\n            </h1>\n            <ResumeDropzone\n              onFileUrlChange={onFileUrlChange}\n              className=\"mt-5\"\n            />\n            {!hasAddedResume && (\n              <>\n                <OrDivider />\n                <SectionWithHeadingAndCreateButton\n                  heading=\"Don't have a resume yet?\"\n                  buttonText=\"Create from scratch\"\n                />\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            {!hasAddedResume && (\n              <>\n                <SectionWithHeadingAndCreateButton\n                  heading=\"You have data saved in browser from prior session\"\n                  buttonText=\"Continue where I left off\"\n                />\n                <OrDivider />\n              </>\n            )}\n            <h1 className=\"font-semibold text-gray-900\">\n              Override data with a new resume\n            </h1>\n            <ResumeDropzone\n              onFileUrlChange={onFileUrlChange}\n              className=\"mt-5\"\n            />\n          </>\n        )}\n      </div>\n    </main>\n  );\n}\n\nconst OrDivider = () => (\n  <div className=\"mx-[-2.5rem] flex items-center pb-6 pt-8\" aria-hidden=\"true\">\n    <div className=\"flex-grow border-t border-gray-200\" />\n    <span className=\"mx-2 mt-[-2px] flex-shrink text-lg text-gray-400\">or</span>\n    <div className=\"flex-grow border-t border-gray-200\" />\n  </div>\n);\n\nconst SectionWithHeadingAndCreateButton = ({\n  heading,\n  buttonText,\n}: {\n  heading: string;\n  buttonText: string;\n}) => {\n  return (\n    <>\n      <p className=\"font-semibold text-gray-900\">{heading}</p>\n      <div className=\"mt-5\">\n        <Link\n          href=\"/resume-builder\"\n          className=\"outline-theme-blue rounded-full bg-sky-500 px-6 pb-2 pt-1.5 text-base font-semibold text-white\"\n        >\n          {buttonText}\n        </Link>\n      </div>\n    </>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/resume-parser/ResumeParserAlgorithmArticle.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/static-components",
        "severity": 2,
        "message": "Error: Cannot create components during render\n\nComponents created during render will reset their state each time they are created. Declare components outside of render.\n\n/home/renato/developer/labs/cvats/app/resume-parser/ResumeParserAlgorithmArticle.tsx:91:29\n  89 |       \"Feature Scores of Other Texts\",\n  90 |     ],\n> 91 |     [\"Name\", profile.name, <Scores key={\"Name\"} scores={profileScores.name} />],\n     |                             ^^^^^^ This component is created during render\n  92 |     [\n  93 |       \"Email\",\n  94 |       profile.email,\n\n/home/renato/developer/labs/cvats/app/resume-parser/ResumeParserAlgorithmArticle.tsx:71:18\n  69 |\n  70 |   const { profile, profileScores } = extractProfile(sections);\n> 71 |   const Scores = ({ scores }: { scores: TextScores }) => {\n     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n> 72 |     return (\n     | ^^^^^^^^^^^^\n> 73 |       <>\n     …\n     | ^^^^^^^^^^^^\n> 83 |     );\n     | ^^^^^^^^^^^^\n> 84 |   };\n     | ^^^^ The component is created during render here\n  85 |   const step4ProfileFeatureScoresTable = [\n  86 |     [\n  87 |       \"Resume Attribute\",",
        "line": 91,
        "column": 29,
        "nodeType": null,
        "endLine": 91,
        "endColumn": 35
      },
      {
        "ruleId": "react-hooks/static-components",
        "severity": 2,
        "message": "Error: Cannot create components during render\n\nComponents created during render will reset their state each time they are created. Declare components outside of render.\n\n/home/renato/developer/labs/cvats/app/resume-parser/ResumeParserAlgorithmArticle.tsx:95:8\n  93 |       \"Email\",\n  94 |       profile.email,\n> 95 |       <Scores key={\"Email\"} scores={profileScores.email} />,\n     |        ^^^^^^ This component is created during render\n  96 |     ],\n  97 |     [\n  98 |       \"Phone\",\n\n/home/renato/developer/labs/cvats/app/resume-parser/ResumeParserAlgorithmArticle.tsx:71:18\n  69 |\n  70 |   const { profile, profileScores } = extractProfile(sections);\n> 71 |   const Scores = ({ scores }: { scores: TextScores }) => {\n     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n> 72 |     return (\n     | ^^^^^^^^^^^^\n> 73 |       <>\n     …\n     | ^^^^^^^^^^^^\n> 83 |     );\n     | ^^^^^^^^^^^^\n> 84 |   };\n     | ^^^^ The component is created during render here\n  85 |   const step4ProfileFeatureScoresTable = [\n  86 |     [\n  87 |       \"Resume Attribute\",",
        "line": 95,
        "column": 8,
        "nodeType": null,
        "endLine": 95,
        "endColumn": 14
      },
      {
        "ruleId": "react-hooks/static-components",
        "severity": 2,
        "message": "Error: Cannot create components during render\n\nComponents created during render will reset their state each time they are created. Declare components outside of render.\n\n/home/renato/developer/labs/cvats/app/resume-parser/ResumeParserAlgorithmArticle.tsx:100:8\n   98 |       \"Phone\",\n   99 |       profile.phone,\n> 100 |       <Scores key={\"Phone\"} scores={profileScores.phone} />,\n      |        ^^^^^^ This component is created during render\n  101 |     ],\n  102 |   ];\n  103 |\n\n/home/renato/developer/labs/cvats/app/resume-parser/ResumeParserAlgorithmArticle.tsx:71:18\n  69 |\n  70 |   const { profile, profileScores } = extractProfile(sections);\n> 71 |   const Scores = ({ scores }: { scores: TextScores }) => {\n     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n> 72 |     return (\n     | ^^^^^^^^^^^^\n> 73 |       <>\n     …\n     | ^^^^^^^^^^^^\n> 83 |     );\n     | ^^^^^^^^^^^^\n> 84 |   };\n     | ^^^^ The component is created during render here\n  85 |   const step4ProfileFeatureScoresTable = [\n  86 |     [\n  87 |       \"Resume Attribute\",",
        "line": 100,
        "column": 8,
        "nodeType": null,
        "endLine": 100,
        "endColumn": 14
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 122,
        "column": 63,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [3380, 3748],
              "text": "\n        . When you open up a PDF file using a text editor, you&apos;ll notice that\n        the raw content looks encoded and is difficult to read. To display it in\n        a readable format, you would need a PDF reader to decode and view the\n        file. Similarly, the resume parser first needs to decode the PDF file in\n        order to extract its text content.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [3380, 3748],
              "text": "\n        . When you open up a PDF file using a text editor, you&lsquo;ll notice that\n        the raw content looks encoded and is difficult to read. To display it in\n        a readable format, you would need a PDF reader to decode and view the\n        file. Similarly, the resume parser first needs to decode the PDF file in\n        order to extract its text content.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [3380, 3748],
              "text": "\n        . When you open up a PDF file using a text editor, you&#39;ll notice that\n        the raw content looks encoded and is difficult to read. To display it in\n        a readable format, you would need a PDF reader to decode and view the\n        file. Similarly, the resume parser first needs to decode the PDF file in\n        order to extract its text content.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [3380, 3748],
              "text": "\n        . When you open up a PDF file using a text editor, you&rsquo;ll notice that\n        the raw content looks encoded and is difficult to read. To display it in\n        a readable format, you would need a PDF reader to decode and view the\n        file. Similarly, the resume parser first needs to decode the PDF file in\n        order to extract its text content.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 131,
        "column": 62,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [3778, 4011],
              "text": "\n        While it is possible to write a custom PDF reader function following the\n        ISO 32000 specification, it is much simpler to leverage an existing\n        library. In this case, the resume parser uses Mozilla&apos;s open source"
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [3778, 4011],
              "text": "\n        While it is possible to write a custom PDF reader function following the\n        ISO 32000 specification, it is much simpler to leverage an existing\n        library. In this case, the resume parser uses Mozilla&lsquo;s open source"
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [3778, 4011],
              "text": "\n        While it is possible to write a custom PDF reader function following the\n        ISO 32000 specification, it is much simpler to leverage an existing\n        library. In this case, the resume parser uses Mozilla&#39;s open source"
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [3778, 4011],
              "text": "\n        While it is possible to write a custom PDF reader function following the\n        ISO 32000 specification, it is much simpler to leverage an existing\n        library. In this case, the resume parser uses Mozilla&rsquo;s open source"
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 153,
        "column": 38,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [5102, 5190],
              "text": "\n        The extracted text items aren&apos;t ready to use yet and have 2 main issues:\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [5102, 5190],
              "text": "\n        The extracted text items aren&lsquo;t ready to use yet and have 2 main issues:\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [5102, 5190],
              "text": "\n        The extracted text items aren&#39;t ready to use yet and have 2 main issues:\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [5102, 5190],
              "text": "\n        The extracted text items aren&rsquo;t ready to use yet and have 2 main issues:\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 160,
        "column": 57,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number &quot;(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number &ldquo;(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number &#34;(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number &rdquo;(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 160,
        "column": 72,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890&quot; might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890&ldquo; might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890&#34; might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890&rdquo; might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 161,
        "column": 37,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items &quot;(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items &ldquo;(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items &#34;(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items &rdquo;(123) 456\", \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 161,
        "column": 47,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456&quot;, \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456&ldquo;, \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456&#34;, \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456&rdquo;, \"-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 161,
        "column": 50,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", &quot;-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", &ldquo;-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", &#34;-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", &rdquo;-\" and \"7890\".\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 161,
        "column": 52,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-&quot; and \"7890\".\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-&ldquo; and \"7890\".\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-&#34; and \"7890\".\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-&rdquo; and \"7890\".\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 161,
        "column": 58,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and &quot;7890\".\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and &ldquo;7890\".\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and &#34;7890\".\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and &rdquo;7890\".\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 161,
        "column": 63,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890&quot;.\n      "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890&ldquo;.\n      "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890&#34;.\n      "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [5339, 5569],
              "text": "\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890&rdquo;.\n      "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 183,
        "column": 23,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [6362, 6621],
              "text": "\n        The average typical character width is calculated by dividing the sum of\n        all text items&apos; widths by the total number characters of the text items\n        (Bolded texts and new line elements are excluded to not skew the\n        results).\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [6362, 6621],
              "text": "\n        The average typical character width is calculated by dividing the sum of\n        all text items&lsquo; widths by the total number characters of the text items\n        (Bolded texts and new line elements are excluded to not skew the\n        results).\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [6362, 6621],
              "text": "\n        The average typical character width is calculated by dividing the sum of\n        all text items&#39; widths by the total number characters of the text items\n        (Bolded texts and new line elements are excluded to not skew the\n        results).\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [6362, 6621],
              "text": "\n        The average typical character width is calculated by dividing the sum of\n        all text items&rsquo; widths by the total number characters of the text items\n        (Bolded texts and new line elements are excluded to not skew the\n        results).\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 192,
        "column": 59,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts&apos; boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don't have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts&lsquo; boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don't have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts&#39; boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don't have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts&rsquo; boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don't have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 194,
        "column": 70,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts' boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don&apos;t have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts' boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don&lsquo;t have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts' boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don&#39;t have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [6775, 7159],
              "text": "\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts' boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don&rsquo;t have\n        those contexts/associations and are just disjointed elements.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 249,
        "column": 14,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9873, 10103],
              "text": "\n        The resume parser also has a fallback heuristic if the main heuristic\n        doesn&apos;t apply. The fallback heuristic mainly performs a keyword matching\n        against a list of common resume section title keywords.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9873, 10103],
              "text": "\n        The resume parser also has a fallback heuristic if the main heuristic\n        doesn&lsquo;t apply. The fallback heuristic mainly performs a keyword matching\n        against a list of common resume section title keywords.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9873, 10103],
              "text": "\n        The resume parser also has a fallback heuristic if the main heuristic\n        doesn&#39;t apply. The fallback heuristic mainly performs a keyword matching\n        against a list of common resume section title keywords.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9873, 10103],
              "text": "\n        The resume parser also has a fallback heuristic if the main heuristic\n        doesn&rsquo;t apply. The fallback heuristic mainly performs a keyword matching\n        against a list of common resume section title keywords.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 292,
        "column": 78,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [12230, 12320],
              "text": "\n          In the resume PDF added, the resume attribute name is likely to be &quot;\n          "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [12230, 12320],
              "text": "\n          In the resume PDF added, the resume attribute name is likely to be &ldquo;\n          "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [12230, 12320],
              "text": "\n          In the resume PDF added, the resume attribute name is likely to be &#34;\n          "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [12230, 12320],
              "text": "\n          In the resume PDF added, the resume attribute name is likely to be &rdquo;\n          "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 293,
        "column": 25,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": { "range": [12334, 12362], "text": "&quot; since its feature score is" },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": { "range": [12334, 12362], "text": "&ldquo; since its feature score is" },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": { "range": [12334, 12362], "text": "&#34; since its feature score is" },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": { "range": [12334, 12362], "text": "&rdquo; since its feature score is" },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 296,
        "column": 44,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [12448, 12684],
              "text": "\n          , which is the highest feature score out of all text items in the\n          profile section. (Some text items&apos; feature scores can be negative,\n          indicating they are very unlikely to be the targeted attribute)\n        "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [12448, 12684],
              "text": "\n          , which is the highest feature score out of all text items in the\n          profile section. (Some text items&lsquo; feature scores can be negative,\n          indicating they are very unlikely to be the targeted attribute)\n        "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [12448, 12684],
              "text": "\n          , which is the highest feature score out of all text items in the\n          profile section. (Some text items&#39; feature scores can be negative,\n          indicating they are very unlikely to be the targeted attribute)\n        "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [12448, 12684],
              "text": "\n          , which is the highest feature score out of all text items in the\n          profile section. (Some text items&rsquo; feature scores can be negative,\n          indicating they are very unlikely to be the targeted attribute)\n        "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 305,
        "column": 30,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [12973, 13105],
              "text": "\n        1. A resume attribute&apos;s feature sets are designed relative to all other\n        resume attributes within the same section. "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [12973, 13105],
              "text": "\n        1. A resume attribute&lsquo;s feature sets are designed relative to all other\n        resume attributes within the same section. "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [12973, 13105],
              "text": "\n        1. A resume attribute&#39;s feature sets are designed relative to all other\n        resume attributes within the same section. "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [12973, 13105],
              "text": "\n        1. A resume attribute&rsquo;s feature sets are designed relative to all other\n        resume attributes within the same section. "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 307,
        "column": 30,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [13111, 13260],
              "text": "\n        2. A resume attribute&apos;s feature sets are manually crafted based on its\n        characteristics and likelihood of each characteristic.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [13111, 13260],
              "text": "\n        2. A resume attribute&lsquo;s feature sets are manually crafted based on its\n        characteristics and likelihood of each characteristic.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [13111, 13260],
              "text": "\n        2. A resume attribute&#39;s feature sets are manually crafted based on its\n        characteristics and likelihood of each characteristic.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [13111, 13260],
              "text": "\n        2. A resume attribute&rsquo;s feature sets are manually crafted based on its\n        characteristics and likelihood of each characteristic.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 325,
        "column": 12,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [13840, 14197],
              "text": "\n        Each resume attribute has multiple feature sets. They can be found in\n        the source code under the extract-resume-from-sections folder and we\n        won&apos;t list them all out here. Each resume attribute usually has a core\n        feature function that greatly identifies them, so we will list out the\n        core feature function below.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [13840, 14197],
              "text": "\n        Each resume attribute has multiple feature sets. They can be found in\n        the source code under the extract-resume-from-sections folder and we\n        won&lsquo;t list them all out here. Each resume attribute usually has a core\n        feature function that greatly identifies them, so we will list out the\n        core feature function below.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [13840, 14197],
              "text": "\n        Each resume attribute has multiple feature sets. They can be found in\n        the source code under the extract-resume-from-sections folder and we\n        won&#39;t list them all out here. Each resume attribute usually has a core\n        feature function that greatly identifies them, so we will list out the\n        core feature function below.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [13840, 14197],
              "text": "\n        Each resume attribute has multiple feature sets. They can be found in\n        the source code under the extract-resume-from-sections folder and we\n        won&rsquo;t list them all out here. Each resume attribute usually has a core\n        feature function that greatly identifies them, so we will list out the\n        core feature function below.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 337,
        "column": 61,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [14381, 14898],
              "text": "\n        The last thing that is worth mentioning is subsections. For profile\n        section, we can directly pass all the text items to the feature scoring\n        systems. But for other sections, such as education and work experience,\n        we have to first divide the section into subsections since there can be\n        multiple schools or work experiences in the section. The feature scoring\n        system then process each subsection to retrieve each&apos;s resume attributes\n        and append the results.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [14381, 14898],
              "text": "\n        The last thing that is worth mentioning is subsections. For profile\n        section, we can directly pass all the text items to the feature scoring\n        systems. But for other sections, such as education and work experience,\n        we have to first divide the section into subsections since there can be\n        multiple schools or work experiences in the section. The feature scoring\n        system then process each subsection to retrieve each&lsquo;s resume attributes\n        and append the results.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [14381, 14898],
              "text": "\n        The last thing that is worth mentioning is subsections. For profile\n        section, we can directly pass all the text items to the feature scoring\n        systems. But for other sections, such as education and work experience,\n        we have to first divide the section into subsections since there can be\n        multiple schools or work experiences in the section. The feature scoring\n        system then process each subsection to retrieve each&#39;s resume attributes\n        and append the results.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [14381, 14898],
              "text": "\n        The last thing that is worth mentioning is subsections. For profile\n        section, we can directly pass all the text items to the feature scoring\n        systems. But for other sections, such as education and work experience,\n        we have to first divide the section into subsections since there can be\n        multiple schools or work experiences in the section. The feature scoring\n        system then process each subsection to retrieve each&rsquo;s resume attributes\n        and append the results.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 346,
        "column": 33,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [14950, 15424],
              "text": "\n        The resume parser applies some heuristics to detect a subsection. The\n        main heuristic to determine a subsection is to check if the vertical\n        line gap between 2 lines is larger than the typical line gap * 1.4,\n        since a well formatted resume usually creates a new empty line break\n        before adding the next subsection. There is also a fallback heuristic if\n        the main heuristic doesn&apos;t apply to check if the text item is bolded.\n      "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [14950, 15424],
              "text": "\n        The resume parser applies some heuristics to detect a subsection. The\n        main heuristic to determine a subsection is to check if the vertical\n        line gap between 2 lines is larger than the typical line gap * 1.4,\n        since a well formatted resume usually creates a new empty line break\n        before adding the next subsection. There is also a fallback heuristic if\n        the main heuristic doesn&lsquo;t apply to check if the text item is bolded.\n      "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [14950, 15424],
              "text": "\n        The resume parser applies some heuristics to detect a subsection. The\n        main heuristic to determine a subsection is to check if the vertical\n        line gap between 2 lines is larger than the typical line gap * 1.4,\n        since a well formatted resume usually creates a new empty line break\n        before adding the next subsection. There is also a fallback heuristic if\n        the main heuristic doesn&#39;t apply to check if the text item is bolded.\n      "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [14950, 15424],
              "text": "\n        The resume parser applies some heuristics to detect a subsection. The\n        main heuristic to determine a subsection is to check if the vertical\n        line gap between 2 lines is larger than the typical line gap * 1.4,\n        since a well formatted resume usually creates a new empty line break\n        before adding the next subsection. There is also a fallback heuristic if\n        the main heuristic doesn&rsquo;t apply to check if the text item is bolded.\n      "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 26,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { isBold } from \"lib/parse-resume-from-pdf/extract-resume-from-sections/lib/common-features\";\nimport {\n  Badge,\n  Heading,\n  Link,\n  Paragraph,\n  Table,\n} from \"components/documentation\";\nimport type {\n  Line,\n  Lines,\n  ResumeSectionToLines,\n  TextItem,\n  TextItems,\n  TextScores,\n} from \"lib/parse-resume-from-pdf/types\";\nimport { extractProfile } from \"lib/parse-resume-from-pdf/extract-resume-from-sections/extract-profile\";\n\nexport const ResumeParserAlgorithmArticle = ({\n  textItems,\n  lines,\n  sections,\n}: {\n  textItems: TextItems;\n  lines: Lines;\n  sections: ResumeSectionToLines;\n}) => {\n  const getBadgeContent = (item: TextItem) => {\n    const X1 = Math.round(item.x);\n    const X2 = Math.round(item.x + item.width);\n    const Y = Math.round(item.y);\n    let content = `X₁=${X1} X₂=${X2} Y=${Y}`;\n    if (X1 === X2) {\n      content = `X=${X2} Y=${Y}`;\n    }\n    if (isBold(item)) {\n      content = `${content} Bold`;\n    }\n    if (item.hasEOL) {\n      content = `${content} NewLine`;\n    }\n    return content;\n  };\n  const step1TextItemsTable = [\n    [\"#\", \"Text Content\", \"Metadata\"],\n    ...textItems.map((item, idx) => [\n      idx + 1,\n      item.text,\n      <Badge key={idx}>{getBadgeContent(item)}</Badge>,\n    ]),\n  ];\n\n  const step2LinesTable = [\n    [\"Lines\", \"Line Content\"],\n    ...lines.map((line, idx) => [\n      idx + 1,\n      line.map((item, idx) => (\n        <span key={idx}>\n          {item.text}\n          {idx !== line.length - 1 && (\n            <span className=\"select-none font-extrabold text-sky-400\">\n              &nbsp;&nbsp;{\"|\"}&nbsp;&nbsp;\n            </span>\n          )}\n        </span>\n      )),\n    ]),\n  ];\n\n  const { profile, profileScores } = extractProfile(sections);\n  const Scores = ({ scores }: { scores: TextScores }) => {\n    return (\n      <>\n        {scores\n          .sort((a, b) => b.score - a.score)\n          .map((item, idx) => (\n            <span key={idx} className=\"break-all\">\n              <Badge>{item.score}</Badge> {item.text}\n              <br />\n            </span>\n          ))}\n      </>\n    );\n  };\n  const step4ProfileFeatureScoresTable = [\n    [\n      \"Resume Attribute\",\n      \"Text (Highest Feature Score)\",\n      \"Feature Scores of Other Texts\",\n    ],\n    [\"Name\", profile.name, <Scores key={\"Name\"} scores={profileScores.name} />],\n    [\n      \"Email\",\n      profile.email,\n      <Scores key={\"Email\"} scores={profileScores.email} />,\n    ],\n    [\n      \"Phone\",\n      profile.phone,\n      <Scores key={\"Phone\"} scores={profileScores.phone} />,\n    ],\n  ];\n\n  return (\n    <article className=\"mt-10\">\n      <Heading className=\"text-primary !mt-0 border-t-2 pt-8\">\n        Resume Parser Algorithm Deep Dive\n      </Heading>\n      <Paragraph smallMarginTop={true}>\n        For the technical curious, this section will dive into the cvats\n        parser algorithm and walks through the 4 steps on how it works. (Note\n        that the algorithm is designed to parse single column resume in English\n        language)\n      </Paragraph>\n      {/* Step 1. Read the text items from a PDF file */}\n      <Heading level={2}>Step 1. Read the text items from a PDF file</Heading>\n      <Paragraph smallMarginTop={true}>\n        A PDF file is a standardized file format defined by the{\" \"}\n        <Link href=\"https://www.iso.org/standard/51502.html\">\n          ISO 32000 specification\n        </Link>\n        . When you open up a PDF file using a text editor, you'll notice that\n        the raw content looks encoded and is difficult to read. To display it in\n        a readable format, you would need a PDF reader to decode and view the\n        file. Similarly, the resume parser first needs to decode the PDF file in\n        order to extract its text content.\n      </Paragraph>\n      <Paragraph>\n        While it is possible to write a custom PDF reader function following the\n        ISO 32000 specification, it is much simpler to leverage an existing\n        library. In this case, the resume parser uses Mozilla's open source{\" \"}\n        <Link href=\"https://github.com/mozilla/pdf.js\">pdf.js</Link> library to\n        first extract all the text items in the file.\n      </Paragraph>\n      <Paragraph>\n        The table below lists {textItems.length} text items that are extracted\n        from the resume PDF added. A text item contains the text content and\n        also some metadata about the content, e.g. its x, y positions in the\n        document, whether the font is bolded, or whether it starts a new line.\n        (Note that x,y position is relative to the bottom left corner of the\n        page, which is the origin 0,0)\n      </Paragraph>\n      <div className=\"mt-4 max-h-72 overflow-y-scroll border scrollbar scrollbar-track-gray-100 scrollbar-thumb-gray-200 scrollbar-w-3\">\n        <Table\n          table={step1TextItemsTable}\n          className=\"!border-none\"\n          tdClassNames={[\"\", \"\", \"md:whitespace-nowrap\"]}\n        />\n      </div>\n      {/* Step 2. Group text items into lines */}\n      <Heading level={2}>Step 2. Group text items into lines</Heading>\n      <Paragraph smallMarginTop={true}>\n        The extracted text items aren't ready to use yet and have 2 main issues:\n      </Paragraph>\n      <Paragraph>\n        <span className=\"mt-3 block font-semibold\">\n          Issue 1: They have some unwanted noises.\n        </span>\n        Some single text items can get broken into multiple ones, as you might\n        observe on the table above, e.g. a phone number \"(123) 456-7890\" might\n        be broken into 3 text items \"(123) 456\", \"-\" and \"7890\".\n      </Paragraph>\n      <Paragraph smallMarginTop={true}>\n        <span className=\"font-semibold\">Solution:</span> To tackle this issue,\n        the resume parser connects adjacent text items into one text item if\n        their distance is smaller than the average typical character width,\n        where\n        <span\n          dangerouslySetInnerHTML={{\n            __html: `<math display=\"block\">\n                        <mrow>\n                            <mn>Distance </mn>\n                            <mo>=</mo>\n                            <mn>RightTextItemX₁</mn>\n                            <mo>-</mo>\n                            <mn>LeftTextItemX₂</mn>\n                        </mrow>\n                    </math>`,\n          }}\n          className=\"my-2 block text-left text-base\"\n        />\n        The average typical character width is calculated by dividing the sum of\n        all text items' widths by the total number characters of the text items\n        (Bolded texts and new line elements are excluded to not skew the\n        results).\n      </Paragraph>\n      <Paragraph>\n        <span className=\"mt-3 block font-semibold\">\n          Issue 2: They lack contexts and associations.\n        </span>\n        When we read a resume, we scan a resume line by line. Our brains can\n        process each section via visual cues such as texts' boldness and\n        proximity, where we can quickly associate texts closer together to be a\n        related group. The extracted text items however currently don't have\n        those contexts/associations and are just disjointed elements.\n      </Paragraph>\n      <Paragraph smallMarginTop={true}>\n        <span className=\"font-semibold\">Solution:</span> To tackle this issue,\n        the resume parser reconstructs those contexts and associations similar\n        to how our brain would read and process the resume. It first groups text\n        items into lines since we read text line by line. It then groups lines\n        into sections, which will be discussed in the next step.\n      </Paragraph>\n      <Paragraph>\n        At the end of step 2, the resume parser extracts {lines.length} lines\n        from the resume PDF added, as shown in the table below. The result is\n        much more readable when displayed in lines. (Some lines might have\n        multiple text items, which are separated by a blue vertical divider{\" \"}\n        <span className=\"select-none font-extrabold text-sky-400\">\n          &nbsp;{\"|\"}&nbsp;\n        </span>\n        )\n      </Paragraph>\n      <div className=\"mt-4 max-h-96 overflow-y-scroll border scrollbar scrollbar-track-gray-100 scrollbar-thumb-gray-200 scrollbar-w-3\">\n        <Table table={step2LinesTable} className=\"!border-none\" />\n      </div>\n      {/* Step 3. Group lines into sections */}\n      <Heading level={2}>Step 3. Group lines into sections</Heading>\n      <Paragraph smallMarginTop={true}>\n        At step 2, the resume parser starts building contexts and associations\n        to text items by first grouping them into lines. Step 3 continues the\n        process to build additional associations by grouping lines into\n        sections.\n      </Paragraph>\n      <Paragraph>\n        Note that every section (except the profile section) starts with a\n        section title that takes up the entire line. This is a common pattern\n        not just in resumes but also in books and blogs. The resume parser uses\n        this pattern to group lines into the closest section title above these\n        lines.\n      </Paragraph>\n      <Paragraph>\n        The resume parser applies some heuristics to detect a section title. The\n        main heuristic to determine a section title is to check if it fulfills\n        all 3 following conditions: <br />\n        1. It is the only text item in the line <br />\n        2. It is <span className=\"font-bold\">bolded</span> <br />\n        3. Its letters are all UPPERCASE\n        <br />\n      </Paragraph>\n      <Paragraph>\n        In simple words, if a text item is double emphasized to be both bolded\n        and uppercase, it is most likely a section title in a resume. This is\n        generally true for a well formatted resume. There can be exceptions, but\n        it is likely not a good use of bolded and uppercase in those cases.\n      </Paragraph>\n      <Paragraph>\n        The resume parser also has a fallback heuristic if the main heuristic\n        doesn't apply. The fallback heuristic mainly performs a keyword matching\n        against a list of common resume section title keywords.\n      </Paragraph>\n      <Paragraph>\n        At the end of step 3, the resume parser identifies the sections from the\n        resume and groups those lines with the associated section title, as\n        shown in the table below. Note that{\" \"}\n        <span className=\"font-bold\">the section titles are bolded</span> and{\" \"}\n        <span className=\"bg-teal-50\">\n          the lines associated with the section are highlighted with the same\n          colors\n        </span>\n        .\n      </Paragraph>\n      <Step3SectionsTable sections={sections} />\n      {/* Step 4. Extract resume from sections */}\n      <Heading level={2}>Step 4. Extract resume from sections</Heading>\n      <Paragraph smallMarginTop={true}>\n        Step 4 is the last step of the resume parsing process and is also the\n        core of the resume parser, where it extracts resume information from the\n        sections.\n      </Paragraph>\n      <Heading level={3}>Feature Scoring System</Heading>\n      <Paragraph smallMarginTop={true}>\n        The gist of the extraction engine is a feature scoring system. Each\n        resume attribute to be extracted has a custom feature sets, where each\n        feature set consists of a feature matching function and a feature\n        matching score if matched (feature matching score can be a positive or\n        negative number). To compute the final feature score of a text item for\n        a particular resume attribute, it would run the text item through all\n        its feature sets and sum up the matching feature scores. This process is\n        carried out for all text items within the section, and the text item\n        with the highest computed feature score is identified as the extracted\n        resume attribute.\n      </Paragraph>\n      <Paragraph>\n        As a demonstration, the table below shows 3 resume attributes in the\n        profile section of the resume PDF added.\n      </Paragraph>\n      <Table table={step4ProfileFeatureScoresTable} className=\"mt-4\" />\n      {(profileScores.name.find((item) => item.text === profile.name)?.score ||\n        0) > 0 && (\n        <Paragraph smallMarginTop={true}>\n          In the resume PDF added, the resume attribute name is likely to be \"\n          {profile.name}\" since its feature score is{\" \"}\n          {profileScores.name.find((item) => item.text === profile.name)?.score}\n          , which is the highest feature score out of all text items in the\n          profile section. (Some text items' feature scores can be negative,\n          indicating they are very unlikely to be the targeted attribute)\n        </Paragraph>\n      )}\n      <Heading level={3}>Feature Sets</Heading>\n      <Paragraph smallMarginTop={true}>\n        Having explained the feature scoring system, we can dive more into how\n        feature sets are constructed for a resume attribute. It follows 2\n        principles: <br />\n        1. A resume attribute's feature sets are designed relative to all other\n        resume attributes within the same section. <br />\n        2. A resume attribute's feature sets are manually crafted based on its\n        characteristics and likelihood of each characteristic.\n      </Paragraph>\n      <Paragraph>\n        The table below lists some of the feature sets for the resume attribute\n        name. It contains feature function that matches the name attribute with\n        positive feature score and also feature function that only matches other\n        resume attributes in the section with negative feature score.\n      </Paragraph>\n      <Table\n        table={step4NameFeatureSetsTable}\n        title=\"Name Feature Sets\"\n        className=\"mt-4\"\n      />\n      <Heading level={3}>Core Feature Function</Heading>\n      <Paragraph smallMarginTop={true}>\n        Each resume attribute has multiple feature sets. They can be found in\n        the source code under the extract-resume-from-sections folder and we\n        won't list them all out here. Each resume attribute usually has a core\n        feature function that greatly identifies them, so we will list out the\n        core feature function below.\n      </Paragraph>\n      <Table table={step4CoreFeatureFunctionTable} className=\"mt-4\" />\n      <Heading level={3}>Special Case: Subsections</Heading>\n      <Paragraph smallMarginTop={true}>\n        The last thing that is worth mentioning is subsections. For profile\n        section, we can directly pass all the text items to the feature scoring\n        systems. But for other sections, such as education and work experience,\n        we have to first divide the section into subsections since there can be\n        multiple schools or work experiences in the section. The feature scoring\n        system then process each subsection to retrieve each's resume attributes\n        and append the results.\n      </Paragraph>\n      <Paragraph smallMarginTop={true}>\n        The resume parser applies some heuristics to detect a subsection. The\n        main heuristic to determine a subsection is to check if the vertical\n        line gap between 2 lines is larger than the typical line gap * 1.4,\n        since a well formatted resume usually creates a new empty line break\n        before adding the next subsection. There is also a fallback heuristic if\n        the main heuristic doesn't apply to check if the text item is bolded.\n      </Paragraph>\n      <Paragraph>\n        And that is everything about the cvats parser algorithm :)\n      </Paragraph>\n      <Paragraph>\n        Written by <Link href=\"https://github.com/xitanggg\">Xitang</Link> on\n        June 2023\n      </Paragraph>\n    </article>\n  );\n};\n\nconst step4NameFeatureSetsTable = [\n  [\"Feature Function\", \"Feature Matching Score\"],\n  [\"Contains only letters, spaces or periods\", \"+3\"],\n  [\"Is bolded\", \"+2\"],\n  [\"Contains all uppercase letters\", \"+2\"],\n  [\"Contains @\", \"-4 (match email)\"],\n  [\"Contains number\", \"-4 (match phone)\"],\n  [\"Contains ,\", \"-4 (match address)\"],\n  [\"Contains /\", \"-4 (match url)\"],\n];\n\nconst step4CoreFeatureFunctionTable = [\n  [\"Resume Attribute\", \"Core Feature Function\", \"Regex\"],\n  [\"Name\", \"Contains only letters, spaces or periods\", \"/^[a-zA-Z\\\\s\\\\.]+$/\"],\n  [\n    \"Email\",\n    <>\n      Match email format xxx@xxx.xxx\n      <br />\n      xxx can be anything not space\n    </>,\n    \"/\\\\S+@\\\\S+\\\\.\\\\S+/\",\n  ],\n  [\n    \"Phone\",\n    <>\n      Match phone format (xxx)-xxx-xxxx <br /> () and - are optional\n    </>,\n    \"/\\\\(?\\\\d{3}\\\\)?[\\\\s-]?\\\\d{3}[\\\\s-]?\\\\d{4}/\",\n  ],\n  [\n    \"Location\",\n    <>Match city and state format {\"City, ST\"}</>,\n    \"/[A-Z][a-zA-Z\\\\s]+, [A-Z]{2}/\",\n  ],\n  [\"Url\", \"Match url format xxx.xxx/xxx\", \"/\\\\S+\\\\.[a-z]+\\\\/\\\\S+/\"],\n  [\"School\", \"Contains a school keyword, e.g. College, University, School\", \"\"],\n  [\"Degree\", \"Contains a degree keyword, e.g. Associate, Bachelor, Master\", \"\"],\n  [\"GPA\", \"Match GPA format x.xx\", \"/[0-4]\\\\.\\\\d{1,2}/\"],\n  [\n    \"Date\",\n    \"Contains date keyword related to year, month, seasons or the word Present\",\n    \"Year: /(?:19|20)\\\\d{2}/\",\n  ],\n  [\n    \"Job Title\",\n    \"Contains a job title keyword, e.g. Analyst, Engineer, Intern\",\n    \"\",\n  ],\n  [\"Company\", \"Is bolded or doesn't match job title & date\", \"\"],\n  [\"Project\", \"Is bolded or doesn't match date\", \"\"],\n];\n\nconst Step3SectionsTable = ({\n  sections,\n}: {\n  sections: ResumeSectionToLines;\n}) => {\n  const table: React.ReactNode[][] = [[\"Lines\", \"Line Content\"]];\n  const trClassNames = [];\n  let lineCounter = 0;\n  const BACKGROUND_COLORS = [\n    \"bg-red-50\",\n    \"bg-yellow-50\",\n    \"bg-orange-50\",\n    \"bg-green-50\",\n    \"bg-blue-50\",\n    \"bg-purple-50\",\n  ] as const;\n  const sectionsEntries = Object.entries(sections);\n\n  const Line = ({ line }: { line: Line }) => {\n    return (\n      <>\n        {line.map((item, idx) => (\n          <span key={idx}>\n            {item.text}\n            {idx !== line.length - 1 && (\n              <span className=\"select-none font-extrabold text-sky-400\">\n                &nbsp;&nbsp;{\"|\"}&nbsp;&nbsp;\n              </span>\n            )}\n          </span>\n        ))}\n      </>\n    );\n  };\n\n  for (let i = 0; i < sectionsEntries.length; i++) {\n    const sectionBackgroundColor = BACKGROUND_COLORS[i % 6];\n    const [sectionTitle, lines] = sectionsEntries[i];\n    table.push([\n      sectionTitle === \"profile\" ? \"\" : lineCounter,\n      sectionTitle === \"profile\" ? \"PROFILE\" : sectionTitle,\n    ]);\n    trClassNames.push(`${sectionBackgroundColor} font-bold`);\n    lineCounter += 1;\n    for (let j = 0; j < lines.length; j++) {\n      table.push([lineCounter, <Line key={lineCounter} line={lines[j]} />]);\n      trClassNames.push(sectionBackgroundColor);\n      lineCounter += 1;\n    }\n  }\n\n  return (\n    <div className=\"mt-4 max-h-96 overflow-y-scroll border scrollbar scrollbar-track-gray-100 scrollbar-thumb-gray-200 scrollbar-w-3\">\n      <Table\n        table={table}\n        className=\"!border-none\"\n        trClassNames={trClassNames}\n      />\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/resume-parser/ResumeTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/app/resume-parser/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ExpanderWithHeightTransition.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/FlexboxSpacer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumeControlBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumeIFrame.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2003, 2006], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2003, 2006], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useMemo } from \"react\";\nimport Frame from \"react-frame-component\";\nimport {\n  A4_HEIGHT_PX,\n  A4_WIDTH_PX,\n  A4_WIDTH_PT,\n  LETTER_HEIGHT_PX,\n  LETTER_WIDTH_PX,\n  LETTER_WIDTH_PT,\n} from \"lib/constants\";\nimport dynamic from \"next/dynamic\";\nimport { getAllFontFamiliesToLoad } from \"components/fonts/lib\";\n\nconst getIframeInitialContent = (isA4: boolean) => {\n  const width = isA4 ? A4_WIDTH_PT : LETTER_WIDTH_PT;\n  const allFontFamilies = getAllFontFamiliesToLoad();\n\n  const allFontFamiliesPreloadLinks = allFontFamilies\n    .map(\n      (\n        font\n      ) => `<link rel=\"preload\" as=\"font\" href=\"/fonts/${font}-Regular.ttf\" type=\"font/ttf\" crossorigin=\"anonymous\">\n<link rel=\"preload\" as=\"font\" href=\"/fonts/${font}-Bold.ttf\" type=\"font/ttf\" crossorigin=\"anonymous\">`\n    )\n    .join(\"\");\n\n  const allFontFamiliesFontFaces = allFontFamilies\n    .map(\n      (\n        font\n      ) => `@font-face {font-family: \"${font}\"; src: url(\"/fonts/${font}-Regular.ttf\");}\n@font-face {font-family: \"${font}\"; src: url(\"/fonts/${font}-Bold.ttf\"); font-weight: bold;}`\n    )\n    .join(\"\");\n\n  return `<!DOCTYPE html>\n<html>\n  <head>\n    ${allFontFamiliesPreloadLinks}\n    <style>\n      ${allFontFamiliesFontFaces}\n    </style>\n  </head>\n  <body style='overflow: hidden; width: ${width}pt; margin: 0; padding: 0; -webkit-text-size-adjust:none;'>\n    <div></div>\n  </body>\n</html>`;\n};\n\n/**\n * Iframe is used here for style isolation, since react pdf uses pt unit.\n * It creates a sandbox document body that uses letter/A4 pt size as width.\n */\nconst ResumeIframe = ({\n  documentSize,\n  scale,\n  children,\n  enablePDFViewer = false,\n}: {\n  documentSize: string;\n  scale: number;\n  children: React.ReactNode;\n  enablePDFViewer?: boolean;\n}) => {\n  const isA4 = documentSize === \"A4\";\n  const iframeInitialContent = useMemo(\n    () => getIframeInitialContent(isA4),\n    [isA4]\n  );\n\n  if (enablePDFViewer) {\n    return (\n      <DynamicPDFViewer className=\"h-full w-full\">\n        {children as any}\n      </DynamicPDFViewer>\n    );\n  }\n  const width = isA4 ? A4_WIDTH_PX : LETTER_WIDTH_PX;\n  const height = isA4 ? A4_HEIGHT_PX : LETTER_HEIGHT_PX;\n\n  return (\n    <div\n      style={{\n        maxWidth: `${width * scale}px`,\n        maxHeight: `${height * scale}px`,\n      }}\n    >\n      {/* There is an outer div and an inner div here. The inner div sets the iframe width and uses transform scale to zoom in/out the resume iframe.\n        While zooming out or scaling down via transform, the element appears smaller but still occupies the same width/height. Therefore, we use the \n        outer div to restrict the max width & height proportionally */}\n      <div\n        style={{\n          width: `${width}px`,\n          height: `${height}px`,\n          transform: `scale(${scale})`,\n        }}\n        className={`origin-top-left bg-white shadow-lg`}\n      >\n        <Frame\n          style={{ width: \"100%\", height: \"100%\" }}\n          initialContent={iframeInitialContent}\n          // key is used to force component to re-mount when document size changes\n          key={isA4 ? \"A4\" : \"LETTER\"}\n        >\n          {children}\n        </Frame>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Load iframe client side since iframe can't be SSR\n */\nexport const ResumeIframeCSR = dynamic(() => Promise.resolve(ResumeIframe), {\n  ssr: false,\n});\n\n// PDFViewer is only used for debugging. Its size is quite large, so we make it dynamic import\nconst DynamicPDFViewer = dynamic(\n  () => import(\"@react-pdf/renderer\").then((module) => module.PDFViewer),\n  {\n    ssr: false,\n  }\n);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/ResumePDFCustom.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/ResumePDFEducation.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/ResumePDFProfile.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/ResumePDFProject.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/ResumePDFSkills.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/ResumePDFWorkExperience.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/common/ResumePDFIcon.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/common/SuppressResumePDFErrorMessage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/common/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/ResumePDF/styles.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/hooks.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Resume/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeDropzone.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/CustomForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/EducationsForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1269, 1272], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1269, 1272], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Form, FormSection } from \"components/ResumeForm/Form\";\nimport {\n  BulletListTextarea,\n  Input,\n} from \"components/ResumeForm/Form/InputGroup\";\nimport { BulletListIconButton } from \"components/ResumeForm/Form/IconButton\";\nimport type { CreateHandleChangeArgsWithDescriptions } from \"components/ResumeForm/types\";\nimport { useAppDispatch, useAppSelector } from \"lib/redux/hooks\";\nimport { changeEducations, selectEducations } from \"lib/redux/resumeSlice\";\nimport type { ResumeEducation } from \"lib/redux/types\";\nimport {\n  changeShowBulletPoints,\n  selectShowBulletPoints,\n} from \"lib/redux/settingsSlice\";\n\nexport const EducationsForm = () => {\n  const educations = useAppSelector(selectEducations);\n  const dispatch = useAppDispatch();\n  const showDelete = educations.length > 1;\n  const form = \"educations\";\n  const showBulletPoints = useAppSelector(selectShowBulletPoints(form));\n\n  return (\n    <Form form={form} addButtonText=\"Add School\">\n      {educations.map(({ school, degree, gpa, date, descriptions }, idx) => {\n        const handleEducationChange = (\n          ...[\n            field,\n            value,\n          ]: CreateHandleChangeArgsWithDescriptions<ResumeEducation>\n        ) => {\n          dispatch(changeEducations({ idx, field, value } as any));\n        };\n\n        const handleShowBulletPoints = (value: boolean) => {\n          dispatch(changeShowBulletPoints({ field: form, value }));\n        };\n\n        const showMoveUp = idx !== 0;\n        const showMoveDown = idx !== educations.length - 1;\n\n        return (\n          <FormSection\n            key={idx}\n            form=\"educations\"\n            idx={idx}\n            showMoveUp={showMoveUp}\n            showMoveDown={showMoveDown}\n            showDelete={showDelete}\n            deleteButtonTooltipText=\"Delete school\"\n          >\n            <Input\n              label=\"School\"\n              labelClassName=\"col-span-4\"\n              name=\"school\"\n              placeholder=\"Cornell University\"\n              value={school}\n              onChange={handleEducationChange}\n            />\n            <Input\n              label=\"Date\"\n              labelClassName=\"col-span-2\"\n              name=\"date\"\n              placeholder=\"May 2018\"\n              value={date}\n              onChange={handleEducationChange}\n            />\n            <Input\n              label=\"Degree & Major\"\n              labelClassName=\"col-span-4\"\n              name=\"degree\"\n              placeholder=\"Bachelor of Science in Computer Engineering\"\n              value={degree}\n              onChange={handleEducationChange}\n            />\n            <Input\n              label=\"GPA\"\n              labelClassName=\"col-span-2\"\n              name=\"gpa\"\n              placeholder=\"3.81\"\n              value={gpa}\n              onChange={handleEducationChange}\n            />\n            <div className=\"relative col-span-full\">\n              <BulletListTextarea\n                label=\"Additional Information (Optional)\"\n                labelClassName=\"col-span-full\"\n                name=\"descriptions\"\n                placeholder=\"Free paragraph space to list out additional activities, courses, awards etc\"\n                value={descriptions}\n                onChange={handleEducationChange}\n                showBulletPoints={showBulletPoints}\n              />\n              <div className=\"absolute left-[15.6rem] top-[0.07rem]\">\n                <BulletListIconButton\n                  showBulletPoints={showBulletPoints}\n                  onClick={handleShowBulletPoints}\n                />\n              </div>\n            </div>\n          </FormSection>\n        );\n      })}\n    </Form>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/Form/FeaturedSkillInput.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/Form/IconButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/Form/InputGroup.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/set-state-in-effect",
        "severity": 2,
        "message": "Error: Calling setState synchronously within an effect can trigger cascading renders\n\nEffects are intended to synchronize state between React and external systems such as manually updating the DOM, state management libraries, or other platform APIs. In general, the body of an effect should do one or both of the following:\n* Update external systems with the latest state from React.\n* Subscribe for updates from some external system, calling setState in a callback function when external state changes.\n\nCalling setState synchronously within an effect body causes cascading renders that can hurt performance, and is not recommended. (https://react.dev/learn/you-might-not-need-an-effect).\n\n/home/renato/developer/labs/cvats/components/ResumeForm/Form/InputGroup.tsx:95:7\n  93 |       !navigator.userAgent.includes(\"Chrome\"); // Note that Chrome also includes Safari in its userAgent\n  94 |     if (isFirefox || isSafari) {\n> 95 |       setShowFallback(true);\n     |       ^^^^^^^^^^^^^^^ Avoid calling setState() directly within an effect\n  96 |     }\n  97 |   }, []);\n  98 |",
        "line": 95,
        "column": 7,
        "nodeType": null,
        "endLine": 95,
        "endColumn": 22
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'newStrings' is never reassigned. Use 'const' instead.",
        "line": 254,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 254,
        "endColumn": 29,
        "fix": { "range": [7563, 7593], "text": "const newStrings: string[] = [];" }
      },
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'string' is never reassigned. Use 'const' instead.",
        "line": 255,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 255,
        "endColumn": 20,
        "fix": { "range": [7603, 7613], "text": "const string" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport { useAutosizeTextareaHeight } from \"lib/hooks/useAutosizeTextareaHeight\";\n\ninterface InputProps<K extends string, V extends string | string[]> {\n  label: string;\n  labelClassName?: string;\n  // name is passed in as a const string. Therefore, we make it a generic type so its type can\n  // be more restricted as a const for the first argument in onChange\n  name: K;\n  value?: V;\n  placeholder: string;\n  onChange: (name: K, value: V) => void;\n}\n\n/**\n * InputGroupWrapper wraps a label element around a input children. This is preferable\n * than having input as a sibling since it makes clicking label auto focus input children\n */\nexport const InputGroupWrapper = ({\n  label,\n  className,\n  children,\n}: {\n  label: string;\n  className?: string;\n  children?: React.ReactNode;\n}) => (\n  <label className={`text-base font-medium text-gray-700 ${className}`}>\n    {label}\n    {children}\n  </label>\n);\n\nexport const INPUT_CLASS_NAME =\n  \"mt-1 px-3 py-2 block w-full rounded-md border border-gray-300 text-gray-900 shadow-sm outline-none font-normal text-base\";\n\nexport const Input = <K extends string>({\n  name,\n  value = \"\",\n  placeholder,\n  onChange,\n  label,\n  labelClassName,\n}: InputProps<K, string>) => {\n  return (\n    <InputGroupWrapper label={label} className={labelClassName}>\n      <input\n        type=\"text\"\n        name={name}\n        value={value}\n        placeholder={placeholder}\n        onChange={(e) => onChange(name, e.target.value)}\n        className={INPUT_CLASS_NAME}\n      />\n    </InputGroupWrapper>\n  );\n};\n\nexport const Textarea = <T extends string>({\n  label,\n  labelClassName: wrapperClassName,\n  name,\n  value = \"\",\n  placeholder,\n  onChange,\n}: InputProps<T, string>) => {\n  const textareaRef = useAutosizeTextareaHeight({ value });\n\n  return (\n    <InputGroupWrapper label={label} className={wrapperClassName}>\n      <textarea\n        ref={textareaRef}\n        name={name}\n        className={`${INPUT_CLASS_NAME} resize-none overflow-hidden`}\n        placeholder={placeholder}\n        value={value}\n        onChange={(e) => onChange(name, e.target.value)}\n      />\n    </InputGroupWrapper>\n  );\n};\n\nexport const BulletListTextarea = <T extends string>(\n  props: InputProps<T, string[]> & { showBulletPoints?: boolean }\n) => {\n  const [showFallback, setShowFallback] = useState(false);\n\n  useEffect(() => {\n    const isFirefox = navigator.userAgent.includes(\"Firefox\");\n    const isSafari =\n      navigator.userAgent.includes(\"Safari\") &&\n      !navigator.userAgent.includes(\"Chrome\"); // Note that Chrome also includes Safari in its userAgent\n    if (isFirefox || isSafari) {\n      setShowFallback(true);\n    }\n  }, []);\n\n  if (showFallback) {\n    return <BulletListTextareaFallback {...props} />;\n  }\n  return <BulletListTextareaGeneral {...props} />;\n};\n\n/**\n * BulletListTextareaGeneral is a textarea where each new line starts with a bullet point.\n *\n * In its core, it uses a div with contentEditable set to True. However, when\n * contentEditable is True, user can paste in any arbitrary html and it would\n * render. So to make it behaves like a textarea, it strips down all html while\n * keeping only the text part.\n *\n * Reference: https://stackoverflow.com/a/74998090/7699841\n */\nconst BulletListTextareaGeneral = <T extends string>({\n  label,\n  labelClassName: wrapperClassName,\n  name,\n  value: bulletListStrings = [],\n  placeholder,\n  onChange,\n  showBulletPoints = true,\n}: InputProps<T, string[]> & { showBulletPoints?: boolean }) => {\n  const html = getHTMLFromBulletListStrings(bulletListStrings);\n  return (\n    <InputGroupWrapper label={label} className={wrapperClassName}>\n      <ContentEditable\n        contentEditable={true}\n        className={`${INPUT_CLASS_NAME} cursor-text [&>div]:list-item ${\n          showBulletPoints ? \"pl-7\" : \"[&>div]:list-['']\"\n        }`}\n        // Note: placeholder currently doesn't work\n        placeholder={placeholder}\n        onChange={(e) => {\n          if (e.type === \"input\") {\n            const { innerText } = e.currentTarget as HTMLDivElement;\n            const newBulletListStrings =\n              getBulletListStringsFromInnerText(innerText);\n            onChange(name, newBulletListStrings);\n          }\n        }}\n        html={html}\n      />\n    </InputGroupWrapper>\n  );\n};\n\nconst NORMALIZED_LINE_BREAK = \"\\n\";\n/**\n * Normalize line breaks to be \\n since different OS uses different line break\n *    Windows -> \\r\\n (CRLF)\n *    Unix    -> \\n (LF)\n *    Mac     -> \\n (LF), or \\r (CR) for earlier versions\n */\nconst normalizeLineBreak = (str: string) =>\n  str.replace(/\\r?\\n/g, NORMALIZED_LINE_BREAK);\nconst dedupeLineBreak = (str: string) =>\n  str.replace(/\\n\\n/g, NORMALIZED_LINE_BREAK);\nconst getStringsByLineBreak = (str: string) => str.split(NORMALIZED_LINE_BREAK);\n\nconst getBulletListStringsFromInnerText = (innerText: string) => {\n  const innerTextWithNormalizedLineBreak = normalizeLineBreak(innerText);\n\n  // In Windows Chrome, pressing enter creates 2 line breaks \"\\n\\n\"\n  // This dedupes it into 1 line break \"\\n\"\n  let newInnerText = dedupeLineBreak(innerTextWithNormalizedLineBreak);\n\n  // Handle the special case when content is empty\n  if (newInnerText === NORMALIZED_LINE_BREAK) {\n    newInnerText = \"\";\n  }\n\n  return getStringsByLineBreak(newInnerText);\n};\n\nconst getHTMLFromBulletListStrings = (bulletListStrings: string[]) => {\n  // If bulletListStrings is an empty array, make it an empty div\n  if (bulletListStrings.length === 0) {\n    return \"<div></div>\";\n  }\n\n  return bulletListStrings.map((text) => `<div>${text}</div>`).join(\"\");\n};\n\n/**\n * BulletListTextareaFallback is a fallback for BulletListTextareaGeneral to work around\n * content editable div issue in some browsers. For example, in Firefox, if user enters\n * space in the content editable div at the end of line, Firefox returns it as a new\n * line character \\n instead of space in innerText.\n */\nconst BulletListTextareaFallback = <T extends string>({\n  label,\n  labelClassName,\n  name,\n  value: bulletListStrings = [],\n  placeholder,\n  onChange,\n  showBulletPoints = true,\n}: InputProps<T, string[]> & { showBulletPoints?: boolean }) => {\n  const textareaValue = getTextareaValueFromBulletListStrings(\n    bulletListStrings,\n    showBulletPoints\n  );\n\n  return (\n    <Textarea\n      label={label}\n      labelClassName={labelClassName}\n      name={name}\n      value={textareaValue}\n      placeholder={placeholder}\n      onChange={(name, value) => {\n        onChange(\n          name,\n          getBulletListStringsFromTextareaValue(value, showBulletPoints)\n        );\n      }}\n    />\n  );\n};\n\nconst getTextareaValueFromBulletListStrings = (\n  bulletListStrings: string[],\n  showBulletPoints: boolean\n) => {\n  const prefix = showBulletPoints ? \"• \" : \"\";\n\n  if (bulletListStrings.length === 0) {\n    return prefix;\n  }\n\n  let value = \"\";\n  for (let i = 0; i < bulletListStrings.length; i++) {\n    const string = bulletListStrings[i];\n    const isLastItem = i === bulletListStrings.length - 1;\n    value += `${prefix}${string}${isLastItem ? \"\" : \"\\r\\n\"}`;\n  }\n  return value;\n};\n\nconst getBulletListStringsFromTextareaValue = (\n  textareaValue: string,\n  showBulletPoints: boolean\n) => {\n  const textareaValueWithNormalizedLineBreak =\n    normalizeLineBreak(textareaValue);\n\n  const strings = getStringsByLineBreak(textareaValueWithNormalizedLineBreak);\n\n  if (showBulletPoints) {\n    // Filter out empty strings\n    const nonEmptyStrings = strings.filter((s) => s !== \"•\");\n\n    let newStrings: string[] = [];\n    for (let string of nonEmptyStrings) {\n      if (string.startsWith(\"• \")) {\n        newStrings.push(string.slice(2));\n      } else if (string.startsWith(\"•\")) {\n        // Handle the special case when user wants to delete the bullet point, in which case\n        // we combine it with the previous line if previous line exists\n        const lastItemIdx = newStrings.length - 1;\n        if (lastItemIdx >= 0) {\n          const lastItem = newStrings[lastItemIdx];\n          newStrings[lastItemIdx] = `${lastItem}${string.slice(1)}`;\n        } else {\n          newStrings.push(string.slice(1));\n        }\n      } else {\n        newStrings.push(string);\n      }\n    }\n    return newStrings;\n  }\n\n  return strings;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/Form/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/ProfileForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/ProjectsForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [965, 968], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [965, 968], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Form, FormSection } from \"components/ResumeForm/Form\";\nimport {\n  Input,\n  BulletListTextarea,\n} from \"components/ResumeForm/Form/InputGroup\";\nimport type { CreateHandleChangeArgsWithDescriptions } from \"components/ResumeForm/types\";\nimport { useAppDispatch, useAppSelector } from \"lib/redux/hooks\";\nimport { selectProjects, changeProjects } from \"lib/redux/resumeSlice\";\nimport type { ResumeProject } from \"lib/redux/types\";\n\nexport const ProjectsForm = () => {\n  const projects = useAppSelector(selectProjects);\n  const dispatch = useAppDispatch();\n  const showDelete = projects.length > 1;\n\n  return (\n    <Form form=\"projects\" addButtonText=\"Add Project\">\n      {projects.map(({ project, date, descriptions }, idx) => {\n        const handleProjectChange = (\n          ...[\n            field,\n            value,\n          ]: CreateHandleChangeArgsWithDescriptions<ResumeProject>\n        ) => {\n          dispatch(changeProjects({ idx, field, value } as any));\n        };\n        const showMoveUp = idx !== 0;\n        const showMoveDown = idx !== projects.length - 1;\n\n        return (\n          <FormSection\n            key={idx}\n            form=\"projects\"\n            idx={idx}\n            showMoveUp={showMoveUp}\n            showMoveDown={showMoveDown}\n            showDelete={showDelete}\n            deleteButtonTooltipText={\"Delete project\"}\n          >\n            <Input\n              name=\"project\"\n              label=\"Project Name\"\n              placeholder=\"cvats\"\n              value={project}\n              onChange={handleProjectChange}\n              labelClassName=\"col-span-4\"\n            />\n            <Input\n              name=\"date\"\n              label=\"Date\"\n              placeholder=\"Winter 2022\"\n              value={date}\n              onChange={handleProjectChange}\n              labelClassName=\"col-span-2\"\n            />\n            <BulletListTextarea\n              name=\"descriptions\"\n              label=\"Description\"\n              placeholder=\"Bullet points\"\n              value={descriptions}\n              onChange={handleProjectChange}\n              labelClassName=\"col-span-full\"\n            />\n          </FormSection>\n        );\n      })}\n    </Form>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/SkillsForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/ThemeForm/InlineInput.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/ThemeForm/Selection.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/ThemeForm/constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/ThemeForm/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/WorkExperiencesForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1249, 1252], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1249, 1252], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Form, FormSection } from \"components/ResumeForm/Form\";\nimport {\n  Input,\n  BulletListTextarea,\n} from \"components/ResumeForm/Form/InputGroup\";\nimport type { CreateHandleChangeArgsWithDescriptions } from \"components/ResumeForm/types\";\nimport { useAppDispatch, useAppSelector } from \"lib/redux/hooks\";\nimport {\n  changeWorkExperiences,\n  selectWorkExperiences,\n} from \"lib/redux/resumeSlice\";\nimport type { ResumeWorkExperience } from \"lib/redux/types\";\n\nexport const WorkExperiencesForm = () => {\n  const workExperiences = useAppSelector(selectWorkExperiences);\n  const dispatch = useAppDispatch();\n\n  const showDelete = workExperiences.length > 1;\n\n  return (\n    <Form form=\"workExperiences\" addButtonText=\"Add Job\">\n      {workExperiences.map(({ company, jobTitle, date, descriptions }, idx) => {\n        const handleWorkExperienceChange = (\n          ...[\n            field,\n            value,\n          ]: CreateHandleChangeArgsWithDescriptions<ResumeWorkExperience>\n        ) => {\n          // TS doesn't support passing union type to single call signature\n          // https://github.com/microsoft/TypeScript/issues/54027\n          // any is used here as a workaround\n          dispatch(changeWorkExperiences({ idx, field, value } as any));\n        };\n        const showMoveUp = idx !== 0;\n        const showMoveDown = idx !== workExperiences.length - 1;\n\n        return (\n          <FormSection\n            key={idx}\n            form=\"workExperiences\"\n            idx={idx}\n            showMoveUp={showMoveUp}\n            showMoveDown={showMoveDown}\n            showDelete={showDelete}\n            deleteButtonTooltipText=\"Delete job\"\n          >\n            <Input\n              label=\"Company\"\n              labelClassName=\"col-span-full\"\n              name=\"company\"\n              placeholder=\"Khan Academy\"\n              value={company}\n              onChange={handleWorkExperienceChange}\n            />\n            <Input\n              label=\"Job Title\"\n              labelClassName=\"col-span-4\"\n              name=\"jobTitle\"\n              placeholder=\"Software Engineer\"\n              value={jobTitle}\n              onChange={handleWorkExperienceChange}\n            />\n            <Input\n              label=\"Date\"\n              labelClassName=\"col-span-2\"\n              name=\"date\"\n              placeholder=\"Jun 2022 - Present\"\n              value={date}\n              onChange={handleWorkExperienceChange}\n            />\n            <BulletListTextarea\n              label=\"Description\"\n              labelClassName=\"col-span-full\"\n              name=\"descriptions\"\n              placeholder=\"Bullet points\"\n              value={descriptions}\n              onChange={handleWorkExperienceChange}\n            />\n          </FormSection>\n        );\n      })}\n    </Form>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/ResumeForm/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/Tooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/TopNavBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/documentation/Badge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/documentation/Heading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/documentation/Link.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/documentation/Paragraph.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/documentation/Table.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/documentation/index.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/fonts/FontsZh.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/fonts/NonEnglishFontsCSSLoader.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/set-state-in-effect",
        "severity": 2,
        "message": "Error: Calling setState synchronously within an effect can trigger cascading renders\n\nEffects are intended to synchronize state between React and external systems such as manually updating the DOM, state management libraries, or other platform APIs. In general, the body of an effect should do one or both of the following:\n* Update external systems with the latest state from React.\n* Subscribe for updates from some external system, calling setState in a callback function when external state changes.\n\nCalling setState synchronously within an effect body causes cascading renders that can hurt performance, and is not recommended. (https://react.dev/learn/you-might-not-need-an-effect).\n\n/home/renato/developer/labs/cvats/components/fonts/NonEnglishFontsCSSLoader.tsx:19:7\n  17 |   useEffect(() => {\n  18 |     if (getAllFontFamiliesToLoad().includes(\"NotoSansSC\")) {\n> 19 |       setShouldLoadFontsZh(true);\n     |       ^^^^^^^^^^^^^^^^^^^^ Avoid calling setState() directly within an effect\n  20 |     }\n  21 |   }, []);\n  22 |",
        "line": 19,
        "column": 7,
        "nodeType": null,
        "endLine": 19,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport { getAllFontFamiliesToLoad } from \"components/fonts/lib\";\n\nconst FontsZhCSR = dynamic(() => import(\"components/fonts/FontsZh\"), {\n  ssr: false,\n});\n\n/**\n * Empty component to lazy load non-english fonts CSS conditionally\n *\n * Reference: https://prawira.medium.com/react-conditional-import-conditional-css-import-110cc58e0da6\n */\nexport const NonEnglishFontsCSSLazyLoader = () => {\n  const [shouldLoadFontsZh, setShouldLoadFontsZh] = useState(false);\n\n  useEffect(() => {\n    if (getAllFontFamiliesToLoad().includes(\"NotoSansSC\")) {\n      setShouldLoadFontsZh(true);\n    }\n  }, []);\n\n  return <>{shouldLoadFontsZh && <FontsZhCSR />}</>;\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/fonts/constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/fonts/hooks.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [911, 914], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [911, 914], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect } from \"react\";\nimport { Font } from \"@react-pdf/renderer\";\nimport { ENGLISH_FONT_FAMILIES } from \"components/fonts/constants\";\nimport { getAllFontFamiliesToLoad } from \"components/fonts/lib\";\n\n/**\n * Register all fonts to React PDF so it can render fonts correctly in PDF\n */\nexport const useRegisterReactPDFFont = () => {\n  useEffect(() => {\n    const allFontFamilies = getAllFontFamiliesToLoad();\n    allFontFamilies.forEach((fontFamily) => {\n      Font.register({\n        family: fontFamily,\n        fonts: [\n          {\n            src: `fonts/${fontFamily}-Regular.ttf`,\n          },\n          {\n            src: `fonts/${fontFamily}-Bold.ttf`,\n            fontWeight: \"bold\",\n          },\n        ],\n      });\n    });\n  }, []);\n};\n\nexport const useRegisterReactPDFHyphenationCallback = (fontFamily: string) => {\n  useEffect(() => {\n    if (ENGLISH_FONT_FAMILIES.includes(fontFamily as any)) {\n      // Disable hyphenation for English Font Family so the word wraps each line\n      // https://github.com/diegomura/react-pdf/issues/311#issuecomment-548301604\n      Font.registerHyphenationCallback((word) => [word]);\n    } else {\n      // React PDF doesn't understand how to wrap non-english word on line break\n      // A workaround is to add an empty character after each word\n      // Reference https://github.com/diegomura/react-pdf/issues/1568\n      Font.registerHyphenationCallback((word) =>\n        word\n          .split(\"\")\n          .map((char) => [char, \"\"])\n          .flat()\n      );\n    }\n  }, [fontFamily]);\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/components/fonts/lib.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/eslint.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/next.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/home/renato/developer/labs/cvats/postcss.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
